{
	"info": {
		"_postman_id": "44a7a83d-d0e0-411b-bef6-0d7db8376e40",
		"name": "ACA Control Room !",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Endpoints",
			"item": [
				{
					"name": "Navigation",
					"item": [
						{
							"name": "get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/navigation/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"navigation",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Identity",
					"item": [
						{
							"name": "get roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/roles",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/user-roles",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"user-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "set user roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/user-roles",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"user-roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deals",
					"item": [
						{
							"name": "getAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"value\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"value\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var json= pm.response.json()\r",
											"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deals?$expand=Companies($expand=ContactsUnderTent)",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deals"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Companies($expand=ContactsUnderTent)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"queryable\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"clientId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"description\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"categoryId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"category\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"status\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"complianceStatus\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"startDate\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"completionDate\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"isUrgent\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"companies\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"dealMembers\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"lastModifiedBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"createdTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"clientId\",\r",
											"            \"name\",\r",
											"            \"description\",\r",
											"            \"categoryId\",\r",
											"            \"category\",\r",
											"            \"status\",\r",
											"            \"complianceStatus\",\r",
											"            \"startDate\",\r",
											"            \"completionDate\",\r",
											"            \"isUrgent\",\r",
											"            \"companies\",\r",
											"            \"dealMembers\",\r",
											"            \"lastModifiedByUserId\",\r",
											"            \"lastModifiedBy\",\r",
											"            \"lastModifiedTimestamp\",\r",
											"            \"createdByUserId\",\r",
											"            \"createdBy\",\r",
											"            \"createdTimestamp\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"queryable\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Response is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    if (jsonData.queryable.length > 0) {\r",
											"        var requestId = pm.request.url.path[3];\r",
											"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deals/:dealId?$expand=Category($select=Name)",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deals",
										":dealId"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Category($select=Name)"
										}
									],
									"variable": [
										{
											"key": "dealId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deals/:dealId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deals",
										":dealId"
									],
									"variable": [
										{
											"key": "dealId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"clientId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"categoryId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complianceStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"startDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completionDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isUrgent\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"lastModifiedByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModifiedTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"id\",\r",
											"    \"clientId\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"categoryId\",\r",
											"    \"status\",\r",
											"    \"complianceStatus\",\r",
											"    \"startDate\",\r",
											"    \"completionDate\",\r",
											"    \"isUrgent\",\r",
											"    \"lastModifiedByUserId\",\r",
											"    \"lastModifiedTimestamp\",\r",
											"    \"createdByUserId\",\r",
											"    \"createdTimestamp\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom Deal\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"9C71B573-0165-4CB7-9EFC-85499FD17BA4\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2021-01-01T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n    \"companies\": [],\r\n    \"dealMembers\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deals",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deals"
									]
								}
							},
							"response": []
						},
						{
							"name": "create full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"clientId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"categoryId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complianceStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"startDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completionDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isUrgent\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"lastModifiedByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModifiedTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"id\",\r",
											"    \"clientId\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"categoryId\",\r",
											"    \"status\",\r",
											"    \"complianceStatus\",\r",
											"    \"startDate\",\r",
											"    \"completionDate\",\r",
											"    \"isUrgent\",\r",
											"    \"lastModifiedByUserId\",\r",
											"    \"lastModifiedTimestamp\",\r",
											"    \"createdByUserId\",\r",
											"    \"createdTimestamp\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom Deal\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n    \"companies\": [\r\n        {\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }\r\n    ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"endDate\": null,\r\n            \"employeeRestriction\": \"InternalDealAssociates\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deals",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deals"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom Deal PATCH\",\r\n    \"description\": \"The deal of a lifetime\",\r\n    \"categoryId\": \"9C71B573-0165-4CB7-9EFC-85499FD17BA4\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deals/:dealId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deals",
										":dealId"
									],
									"variable": [
										{
											"key": "dealId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "put full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"4193 ControlRoom Deal PUT\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n    \"isDraft\": false,\r\n    \"companies\": [\r\n        {\r\n            \"id\": \"3B96CB2F-8EFE-4016-D735-08D951959E56\",\r\n            \"name\": \"4193 ControlRoom Company PUT\",\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Active\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\",\r\n            \"contactsUnderTent\": [\r\n                {\r\n                    \"id\": \"6C08ACC6-9F94-4ADA-E5AF-08D95110C3F2\",\r\n                    \"name\": \"ControlRoom CUT\",\r\n                    \"title\": \"title 2\",\r\n                    \"clientId\": 3396,\r\n                    \"companyId\": \"46499bfa-9b96-45ed-b048-08d950d32316\",\r\n                    \"addedDate\": \"2021-07-27T07:50:00.8080144+00:00\",\r\n                    \"lastModifiedByUserId\": \"d9999ced-bb64-43fc-b085-6ee83eb949e4\",\r\n                    \"lastModifiedTimestamp\": \"2021-07-28T07:50:00.8080144+00:00\",\r\n                    \"createdByUserId\": \"d9999ced-bb64-43fc-b085-6ee83eb949e4\",\r\n                    \"createdTimestamp\": \"2021-07-27T07:50:00.8080144+00:00\"\r\n                },\r\n                {\r\n                    \"name\": \"ControlRoom CUT NEW NEW\",\r\n                    \"title\": \"title 2\",\r\n                    \"clientId\": 3396,\r\n                    \"companyId\": \"46499bfa-9b96-45ed-b048-08d950d32316\",\r\n                    \"addedDate\": \"2021-07-27T07:50:00.8080144+00:00\",\r\n                    \"lastModifiedByUserId\": \"d9999ced-bb64-43fc-b085-6ee83eb949e4\",\r\n                    \"lastModifiedTimestamp\": \"2021-07-28T07:50:00.8080144+00:00\",\r\n                    \"createdByUserId\": \"d9999ced-bb64-43fc-b085-6ee83eb949e4\",\r\n                    \"createdTimestamp\": \"2021-07-27T07:50:00.8080144+00:00\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"4193 ControlRoom Company NEW\",\r\n            \"dataDestructionCompletedDate\": \"2024-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2024-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Active\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\",\r\n            \"contactsUnderTent\": [\r\n                {\r\n                    \"clientId\": 3396,\r\n                    \"name\": \"ControlRoom ContactUnderTent NEW NEW\",\r\n                    \"title\": \"title\",\r\n                    \"companyId\": \"46499bfa-9b96-45ed-b048-08d950d32316\",\r\n                    \"addedDate\": \"2021-07-27T07:50:00.8080144+00:00\",\r\n                    \"lastModifiedByUserId\": \"d9999ced-bb64-43fc-b085-6ee83eb949e4\",\r\n                    \"lastModifiedTimestamp\": \"2021-07-28T07:50:00.8080144+00:00\",\r\n                    \"createdByUserId\": \"d9999ced-bb64-43fc-b085-6ee83eb949e4\",\r\n                    \"createdTimestamp\": \"2021-07-27T07:50:00.8080144+00:00\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"id\": \"4DBCFC0A-701A-4CC4-F94B-08D950FD8269\",\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"AssociatedComplianceTeamUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"id\": \"A77E1574-617D-4019-0301-08D950FE4B1F\",\r\n            \"name\": \"4193 ControlRoom Restriction PUT\",\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"endDate\": null,\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\":[\r\n                {\r\n                    \"company\": {\r\n                        \"name\": \"4193 ControlRoom Company NEW\"\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"4193 ControlRoom Restriction PUT NEW\",\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"endDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"AssociatedComplianceTeam\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deals/:dealId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deals",
										":dealId"
									],
									"variable": [
										{
											"key": "dealId",
											"value": "80fcb264-7a5b-4668-d7a4-08d950d32303"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deal Categories",
					"item": [
						{
							"name": "getAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-categories?$expand=Deals",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-categories"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Deals"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-categories/:id",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-categories",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-categories/:id",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-categories",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \"name\": \"ControlRoom DealCategory\"\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-categories",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom Category\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-categories/:id",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-categories",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "9C71B573-0165-4CB7-9EFC-85499FD17BA4"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deal Restrictions",
					"item": [
						{
							"name": "getAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-restrictions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-restrictions"
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"queryable\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"clientId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"description\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"categoryId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"category\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"status\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"complianceStatus\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"startDate\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"completionDate\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"isUrgent\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"companies\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"dealMembers\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"lastModifiedBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"createdTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"clientId\",\r",
											"            \"name\",\r",
											"            \"description\",\r",
											"            \"categoryId\",\r",
											"            \"category\",\r",
											"            \"status\",\r",
											"            \"complianceStatus\",\r",
											"            \"startDate\",\r",
											"            \"completionDate\",\r",
											"            \"isUrgent\",\r",
											"            \"companies\",\r",
											"            \"dealMembers\",\r",
											"            \"lastModifiedByUserId\",\r",
											"            \"lastModifiedBy\",\r",
											"            \"lastModifiedTimestamp\",\r",
											"            \"createdByUserId\",\r",
											"            \"createdBy\",\r",
											"            \"createdTimestamp\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"queryable\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Response is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    if (jsonData.queryable.length > 0) {\r",
											"        var requestId = pm.request.url.path[3];\r",
											"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-restrictions/:deaRestrictionlId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-restrictions",
										":deaRestrictionlId"
									],
									"variable": [
										{
											"key": "deaRestrictionlId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-restrictions/:deaRestrictionlId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-restrictions",
										":deaRestrictionlId"
									],
									"variable": [
										{
											"key": "deaRestrictionlId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"clientId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"categoryId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complianceStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"startDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completionDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isUrgent\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"lastModifiedByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModifiedTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"id\",\r",
											"    \"clientId\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"categoryId\",\r",
											"    \"status\",\r",
											"    \"complianceStatus\",\r",
											"    \"startDate\",\r",
											"    \"completionDate\",\r",
											"    \"isUrgent\",\r",
											"    \"lastModifiedByUserId\",\r",
											"    \"lastModifiedTimestamp\",\r",
											"    \"createdByUserId\",\r",
											"    \"createdTimestamp\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom Restriction\",\r\n    \"dealId\": \"4FA02957-7CC6-4767-BEC5-08D92C2971D8\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"endDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"employeeRestriction\": \"InternalInsiders\",\r\n    \"companyRestrictions\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-restrictions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-restrictions"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom Restriction\",\r\n    \"dealId\": \"4FA02957-7CC6-4767-BEC5-08D92C2971D8\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"endDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"employeeRestriction\": \"InternalInsiders\",\r\n    \"companyRestrictions\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-restrictions/:deaRestrictionlId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-restrictions",
										":deaRestrictionlId"
									],
									"variable": [
										{
											"key": "deaRestrictionlId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "put",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom Restriction PUT\",\r\n    \"dealId\": \"4FA02957-7CC6-4767-BEC5-08D92C2971D8\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"endDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"employeeRestriction\": [],\r\n    \"companyRestrictions\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-restrictions/:deaRestrictionlId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-restrictions",
										":deaRestrictionlId"
									],
									"variable": [
										{
											"key": "deaRestrictionlId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deal Members",
					"item": [
						{
							"name": "getAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-members",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-members"
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-members/:id",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-members",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-members/:id",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-members",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"dealId\": \"4FA02957-7CC6-4767-BEC5-08D92C2971D8\",\r\n    \"memberId\": \"EE3034BA-ECCC-44F5-BDB4-93EAF6679944\",\r\n    \"memberType\": \"InternalDealLeadUser\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-members",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-members"
									]
								}
							},
							"response": []
						},
						{
							"name": "put",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"MSN Deal\",\r\n    \"description\": \"MSN The deal of a lifetime\",\r\n    \"categoryId\": \"9C71B573-0165-4CB7-9EFC-85499FD17BA4\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2022-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2022-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n    \"companies\": [],\r\n    \"dealMembers\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-members/:id",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-members",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"memberType\": \"InternalDealAssociateUser\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-members/:id",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-members",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Document Types",
					"item": [
						{
							"name": "getAll",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/document-types",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"document-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"queryable\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"clientId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"description\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"categoryId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"category\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"status\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"complianceStatus\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"startDate\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"completionDate\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"isUrgent\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"companies\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"dealMembers\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"lastModifiedBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"createdTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"clientId\",\r",
											"            \"name\",\r",
											"            \"description\",\r",
											"            \"categoryId\",\r",
											"            \"category\",\r",
											"            \"status\",\r",
											"            \"complianceStatus\",\r",
											"            \"startDate\",\r",
											"            \"completionDate\",\r",
											"            \"isUrgent\",\r",
											"            \"companies\",\r",
											"            \"dealMembers\",\r",
											"            \"lastModifiedByUserId\",\r",
											"            \"lastModifiedBy\",\r",
											"            \"lastModifiedTimestamp\",\r",
											"            \"createdByUserId\",\r",
											"            \"createdBy\",\r",
											"            \"createdTimestamp\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"queryable\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Response is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    if (jsonData.queryable.length > 0) {\r",
											"        var requestId = pm.request.url.path[3];\r",
											"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/document-types/:documentTypeId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"document-types",
										":documentTypeId"
									],
									"variable": [
										{
											"key": "documentTypeId",
											"value": "373B58DE-E888-47B2-4E47-08D94DF4A02D"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"clientId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"categoryId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complianceStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"startDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completionDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isUrgent\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"lastModifiedByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModifiedTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"id\",\r",
											"    \"clientId\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"categoryId\",\r",
											"    \"status\",\r",
											"    \"complianceStatus\",\r",
											"    \"startDate\",\r",
											"    \"completionDate\",\r",
											"    \"isUrgent\",\r",
											"    \"lastModifiedByUserId\",\r",
											"    \"lastModifiedTimestamp\",\r",
											"    \"createdByUserId\",\r",
											"    \"createdTimestamp\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/document-types",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"document-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/document-types/:documentTypeId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"document-types",
										":documentTypeId"
									],
									"variable": [
										{
											"key": "documentTypeId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/document-types/:documentTypeId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"document-types",
										":documentTypeId"
									],
									"variable": [
										{
											"key": "documentTypeId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "put",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/document-types/:documentTypeId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"document-types",
										":documentTypeId"
									],
									"variable": [
										{
											"key": "documentTypeId",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Companies",
					"item": [
						{
							"name": "getAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"value\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"value\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var json= pm.response.json()\r",
											"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/companies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"queryable\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"clientId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"description\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"categoryId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"category\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"status\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"complianceStatus\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"startDate\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"completionDate\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"isUrgent\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"companies\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"dealMembers\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"lastModifiedBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"createdTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"clientId\",\r",
											"            \"name\",\r",
											"            \"description\",\r",
											"            \"categoryId\",\r",
											"            \"category\",\r",
											"            \"status\",\r",
											"            \"complianceStatus\",\r",
											"            \"startDate\",\r",
											"            \"completionDate\",\r",
											"            \"isUrgent\",\r",
											"            \"companies\",\r",
											"            \"dealMembers\",\r",
											"            \"lastModifiedByUserId\",\r",
											"            \"lastModifiedBy\",\r",
											"            \"lastModifiedTimestamp\",\r",
											"            \"createdByUserId\",\r",
											"            \"createdBy\",\r",
											"            \"createdTimestamp\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"queryable\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Response is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    if (jsonData.queryable.length > 0) {\r",
											"        var requestId = pm.request.url.path[3];\r",
											"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/companies/:companyId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"companies",
										":companyId"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"clientId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"categoryId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complianceStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"startDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completionDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isUrgent\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"lastModifiedByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModifiedTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"id\",\r",
											"    \"clientId\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"categoryId\",\r",
											"    \"status\",\r",
											"    \"complianceStatus\",\r",
											"    \"startDate\",\r",
											"    \"completionDate\",\r",
											"    \"isUrgent\",\r",
											"    \"lastModifiedByUserId\",\r",
											"    \"lastModifiedTimestamp\",\r",
											"    \"createdByUserId\",\r",
											"    \"createdTimestamp\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom Company\",\r\n    \"dealId\": \"4FA02957-7CC6-4767-BEC5-08D92C2971D8\",\r\n    \"typeId\": \"4FA02957-7CC6-4767-BEC5-08D92C2971D8\",\r\n    \"type\": {},\r\n    \"status\": \"Active\",\r\n    \"ndaStatus\": \"NotAvailable\",\r\n    \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"dataDestructionStatus\": \"NotAvailable\",\r\n    \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"contactsUnderTent\": [],\r\n    \"companyAdvisors\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/companies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/companies/:companyId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"companies",
										":companyId"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom Company\",\r\n    \"dealId\": \"4FA02957-7CC6-4767-BEC5-08D92C2971D8\",\r\n    \"typeId\": \"4FA02957-7CC6-4767-BEC5-08D92C2971D8\",\r\n    \"type\": {},\r\n    \"status\": \"Active\",\r\n    \"ndaStatus\": \"NotAvailable\",\r\n    \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"dataDestructionStatus\": \"NotAvailable\",\r\n    \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"contactsUnderTent\": [],\r\n    \"companyAdvisors\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/companies/:companyId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"companies",
										":companyId"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "put",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom Company\",\r\n    \"dealId\": \"4FA02957-7CC6-4767-BEC5-08D92C2971D8\",\r\n    \"typeId\": \"4FA02957-7CC6-4767-BEC5-08D92C2971D8\",\r\n    \"type\": {},\r\n    \"status\": \"Active\",\r\n    \"ndaStatus\": \"NotAvailable\",\r\n    \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"dataDestructionStatus\": \"NotAvailable\",\r\n    \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"contactsUnderTent\": [],\r\n    \"companyAdvisors\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/companies/:companyId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"companies",
										":companyId"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Company Types",
					"item": [
						{
							"name": "getAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"value\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"value\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var json= pm.response.json()\r",
											"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/company-types",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"company-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"queryable\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"clientId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"description\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"categoryId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"category\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"status\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"complianceStatus\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"startDate\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"completionDate\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"isUrgent\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"companies\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"dealMembers\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"lastModifiedBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"createdTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"clientId\",\r",
											"            \"name\",\r",
											"            \"description\",\r",
											"            \"categoryId\",\r",
											"            \"category\",\r",
											"            \"status\",\r",
											"            \"complianceStatus\",\r",
											"            \"startDate\",\r",
											"            \"completionDate\",\r",
											"            \"isUrgent\",\r",
											"            \"companies\",\r",
											"            \"dealMembers\",\r",
											"            \"lastModifiedByUserId\",\r",
											"            \"lastModifiedBy\",\r",
											"            \"lastModifiedTimestamp\",\r",
											"            \"createdByUserId\",\r",
											"            \"createdBy\",\r",
											"            \"createdTimestamp\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"queryable\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Response is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    if (jsonData.queryable.length > 0) {\r",
											"        var requestId = pm.request.url.path[3];\r",
											"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/company-types/:companyTypeId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"company-types",
										":companyTypeId"
									],
									"variable": [
										{
											"key": "companyTypeId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"clientId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"categoryId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complianceStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"startDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completionDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isUrgent\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"lastModifiedByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModifiedTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"id\",\r",
											"    \"clientId\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"categoryId\",\r",
											"    \"status\",\r",
											"    \"complianceStatus\",\r",
											"    \"startDate\",\r",
											"    \"completionDate\",\r",
											"    \"isUrgent\",\r",
											"    \"lastModifiedByUserId\",\r",
											"    \"lastModifiedTimestamp\",\r",
											"    \"createdByUserId\",\r",
											"    \"createdTimestamp\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/company-types",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"company-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/company-types/:companyTypeId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"company-types",
										":companyTypeId"
									],
									"variable": [
										{
											"key": "companyTypeId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/company-types/:companyTypeId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"company-types",
										":companyTypeId"
									],
									"variable": [
										{
											"key": "companyTypeId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "put",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/company-types/:companyTypeId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"company-types",
										":companyTypeId"
									],
									"variable": [
										{
											"key": "companyTypeId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ContactsUnderTent",
					"item": [
						{
							"name": "getAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"value\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"value\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var json= pm.response.json()\r",
											"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/contacts-under-tent",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"contacts-under-tent"
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"queryable\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"clientId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"description\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"categoryId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"category\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"status\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"complianceStatus\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"startDate\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"completionDate\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"isUrgent\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"companies\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"dealMembers\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"lastModifiedBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"createdTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"clientId\",\r",
											"            \"name\",\r",
											"            \"description\",\r",
											"            \"categoryId\",\r",
											"            \"category\",\r",
											"            \"status\",\r",
											"            \"complianceStatus\",\r",
											"            \"startDate\",\r",
											"            \"completionDate\",\r",
											"            \"isUrgent\",\r",
											"            \"companies\",\r",
											"            \"dealMembers\",\r",
											"            \"lastModifiedByUserId\",\r",
											"            \"lastModifiedBy\",\r",
											"            \"lastModifiedTimestamp\",\r",
											"            \"createdByUserId\",\r",
											"            \"createdBy\",\r",
											"            \"createdTimestamp\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"queryable\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Response is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    if (jsonData.queryable.length > 0) {\r",
											"        var requestId = pm.request.url.path[3];\r",
											"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/contacts-under-tent/:contactUnderTentId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"contacts-under-tent",
										":contactUnderTentId"
									],
									"variable": [
										{
											"key": "contactUnderTentId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"clientId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"categoryId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complianceStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"startDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completionDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isUrgent\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"lastModifiedByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModifiedTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"id\",\r",
											"    \"clientId\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"categoryId\",\r",
											"    \"status\",\r",
											"    \"complianceStatus\",\r",
											"    \"startDate\",\r",
											"    \"completionDate\",\r",
											"    \"isUrgent\",\r",
											"    \"lastModifiedByUserId\",\r",
											"    \"lastModifiedTimestamp\",\r",
											"    \"createdByUserId\",\r",
											"    \"createdTimestamp\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom ContactUnderTent\",\r\n    \"companyId\": \"63D8B0F9-C293-4ED1-294E-08D93C6D0CB3\",\r\n    \"addedDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"userId\": 7603\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/contacts-under-tent",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"contacts-under-tent"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/contacts-under-tent/:contactUnderTentId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"contacts-under-tent",
										":contactUnderTentId"
									],
									"variable": [
										{
											"key": "contactUnderTentId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom ContactUnderTent\",\r\n    \"userId\": 7603,\r\n    \"companyId\": \"63D8B0F9-C293-4ED1-294E-08D93C6D0CB3\",\r\n    \"addedDate\": \"2023-01-01T00:00:00+00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/contacts-under-tent/:contactUnderTentId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"contacts-under-tent",
										":contactUnderTentId"
									],
									"variable": [
										{
											"key": "contactUnderTentId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "put",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom ContactUnderTent\",\r\n    \"userId\": 7603,\r\n    \"companyId\": \"63D8B0F9-C293-4ED1-294E-08D93C6D0CB3\",\r\n    \"addedDate\": \"2023-01-01T00:00:00+00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/contacts-under-tent/:contactUnderTentId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"contacts-under-tent",
										":contactUnderTentId"
									],
									"variable": [
										{
											"key": "contactUnderTentId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Comments",
					"item": [
						{
							"name": "getAll",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/comments",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/comments/:id",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"comments",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "706711FB-3814-43F1-10EB-08D95D93B0C3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/comments/:id",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"comments",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "37D61502-BFFC-4DD2-F353-08D95D956015"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entityType\": \"Deal\",\r\n  \"visibility\": \"Public\",\r\n  \"entityId\": \"F934E964-47AD-477F-9365-82D2B7E9112F\",\r\n  \"text\" : \"Comment Text\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/comments",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"visibility\": \"Private\",\r\n  \"text\" : \"PATCH Comment Text\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/comments/{{commentId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Documents",
					"item": [
						{
							"name": "getAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"documentTypeId\", jsonData.value[0].documentTypeId);",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/documents",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"documentId\", jsonData.id);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "sample.pdf"
										},
										{
											"key": "entityId",
											"value": "{{entityId}}",
											"type": "text"
										},
										{
											"key": "documentTypeId",
											"value": "{{documentTypeId}}",
											"type": "text"
										},
										{
											"key": "entityType",
											"value": "{{entityType}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/documents/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"documents",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"documentTypeId\": \"bdfaec4d-d493-4ae1-89a5-e8caaac793a8\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/documents/{{documentId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"documents",
										"{{documentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "download",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/documents/{{documentId}}/download",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"documents",
										"{{documentId}}",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/documents/{{documentId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"documents",
										"{{documentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Security Master",
					"item": [
						{
							"name": "look up",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/security-master/lookup?lookUpType=SecMasterSecurityId&lookUpValue=031df699-5502-eb11-8140-000c29887906",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"security-master",
										"lookup"
									],
									"query": [
										{
											"key": "lookUpType",
											"value": "SecMasterSecurityId"
										},
										{
											"key": "lookUpValue",
											"value": "031df699-5502-eb11-8140-000c29887906"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/security-master/search?term=googl&top=25&isFullSearch=true&supplementalFields=cusip,isin,tickerSymbol,country,sector,exchangeMic",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"security-master",
										"search"
									],
									"query": [
										{
											"key": "term",
											"value": "googl"
										},
										{
											"key": "top",
											"value": "25"
										},
										{
											"key": "isFullSearch",
											"value": "true"
										},
										{
											"key": "supplementalFields",
											"value": "cusip,isin,tickerSymbol,country,sector,exchangeMic"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Webhook Integration",
					"item": [
						{
							"name": "getAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"value\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"value\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var json= pm.response.json()\r",
											"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/webhook-integration?$expand=webhooks,IntegrationRestrictionLists",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"webhook-integration"
									],
									"query": [
										{
											"key": "$expand",
											"value": "webhooks,IntegrationRestrictionLists"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"clientId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"categoryId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complianceStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"startDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completionDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isUrgent\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"lastModifiedByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModifiedTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"id\",\r",
											"    \"clientId\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"categoryId\",\r",
											"    \"status\",\r",
											"    \"complianceStatus\",\r",
											"    \"startDate\",\r",
											"    \"completionDate\",\r",
											"    \"isUrgent\",\r",
											"    \"lastModifiedByUserId\",\r",
											"    \"lastModifiedTimestamp\",\r",
											"    \"createdByUserId\",\r",
											"    \"createdTimestamp\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook 12\",\r\n    \"webhookUrl\": \"http://test.com\",\r\n    \"status\": \"Active\",\r\n    \"webhooks\": [\r\n        {\r\n           \"webhookDefinitionId\":\"1DE65E60-B740-EC11-907E-683E266BB4DE\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"name\": \"Test integrationRestrictionLists 11\",\r\n            \"notes\": \"\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/webhook-integration",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"webhook-integration"
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"queryable\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"clientId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"description\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"categoryId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"category\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"status\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"complianceStatus\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"startDate\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"completionDate\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"isUrgent\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"companies\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"dealMembers\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"lastModifiedBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"createdTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"clientId\",\r",
											"            \"name\",\r",
											"            \"description\",\r",
											"            \"categoryId\",\r",
											"            \"category\",\r",
											"            \"status\",\r",
											"            \"complianceStatus\",\r",
											"            \"startDate\",\r",
											"            \"completionDate\",\r",
											"            \"isUrgent\",\r",
											"            \"companies\",\r",
											"            \"dealMembers\",\r",
											"            \"lastModifiedByUserId\",\r",
											"            \"lastModifiedBy\",\r",
											"            \"lastModifiedTimestamp\",\r",
											"            \"createdByUserId\",\r",
											"            \"createdBy\",\r",
											"            \"createdTimestamp\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"queryable\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Response is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    if (jsonData.queryable.length > 0) {\r",
											"        var requestId = pm.request.url.path[3];\r",
											"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/webhook-integration/:webhookId?$expand=webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"webhook-integration",
										":webhookId"
									],
									"query": [
										{
											"key": "$expand",
											"value": "webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists"
										}
									],
									"variable": [
										{
											"key": "webhookId",
											"value": "1186a3c9-6399-4b86-1b7a-08d9a4330f90"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"de51243f-53c2-4f98-a0f2-08d9a380432d\",\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook 3 - Update\",\r\n    \"webhookUrl\": \"https://test.com\",\r\n    \"status\": \"Active\",\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"id\": \"0a3d2247-7ee5-41bd-f6d9-08d9a38084d6\",\r\n            \"name\": \"Test integrationRestrictionLists 5\",\r\n            \"notes\": \"Test integrationRestrictionLists 5 Notes\",\r\n            \"webhookIntegrationId\": \"de51243f-53c2-4f98-a0f2-08d9a380432d\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/webhook-integration/:webhookId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"webhook-integration",
										":webhookId"
									],
									"variable": [
										{
											"key": "webhookId",
											"value": "2616ec81-e477-4232-e266-08d9a064a358"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "put",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"responseTimeOutMinutes\": 60,\r\n            \"id\": \"de51243f-53c2-4f98-a0f2-08d9a380432d\",\r\n            \"name\": \"Test WebHook 3\",\r\n            \"clientId\": 3396,\r\n            \"webhookUrl\": \"https://test.com\",\r\n            \"isActive\": true,\r\n            \"status\": \"Active\",\r\n            \"subscriptionType\": 1,\r\n            \"lastModifiedByUserId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"lastModifiedTimestamp\": \"2021-11-09T14:51:30.4051725Z\",\r\n            \"createdByUserId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"createdTimestamp\": \"2021-11-09T12:57:42.9468997Z\",\r\n            \"webhooks\": [\r\n                {\r\n                    \"webhookDefinitionId\": \"74198fdb-b640-ec11-907e-683e266bb4de\",\r\n                    \"webhookSubscriptionId\": \"de51243f-53c2-4f98-a0f2-08d9a380432d\",\r\n                    \"lastModifiedByUserId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n                    \"lastModifiedTimestamp\": \"2021-11-09T12:57:42.9468997Z\",\r\n                    \"createdByUserId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n                    \"createdTimestamp\": \"2021-11-09T12:57:42.9468997Z\"\r\n                }\r\n            ],\r\n            \"integrationRestrictionLists\": [\r\n                {\r\n                    \"id\": \"adf51d08-0969-41aa-05c9-08d9a390636d\",\r\n                    \"clientId\": 3396,\r\n                    \"name\": \"Test integrationRestrictionLists 6 - Update \",\r\n                    \"notes\": \"Test integrationRestrictionLists 6 Notes Update\",\r\n                    \"webhookIntegrationId\": \"de51243f-53c2-4f98-a0f2-08d9a380432d\",\r\n                    \"lastModifiedByUserId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n                    \"lastModifiedTimestamp\": \"2021-11-09T14:51:30.4051725Z\",\r\n                    \"createdByUserId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n                    \"createdTimestamp\": \"2021-11-09T14:51:30.4051725Z\"\r\n                },\r\n                 {\r\n                    \"name\": \"Test integrationRestrictionLists 8 \",\r\n                    \"notes\": \"Test integrationRestrictionLists 8\",\r\n                    \"webhookIntegrationId\": \"de51243f-53c2-4f98-a0f2-08d9a380432d\"\r\n                }\r\n            ]\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/webhook-integration/:webhookId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"webhook-integration",
										":webhookId"
									],
									"variable": [
										{
											"key": "webhookId",
											"value": "de51243f-53c2-4f98-a0f2-08d9a380432d"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/webhook-integration/:webhookId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"webhook-integration",
										":webhookId"
									],
									"variable": [
										{
											"key": "webhookId",
											"value": "1186a3c9-6399-4b86-1b7a-08d9a4330f90"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Integration Restriction List",
					"item": [
						{
							"name": "getAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"value\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"value\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var json= pm.response.json()\r",
											"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/integration-restriction-list?$expand=employeeLevelRestrictions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"integration-restriction-list"
									],
									"query": [
										{
											"key": "$expand",
											"value": "employeeLevelRestrictions"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"clientId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"categoryId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complianceStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"startDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completionDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isUrgent\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"lastModifiedByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModifiedTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"id\",\r",
											"    \"clientId\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"categoryId\",\r",
											"    \"status\",\r",
											"    \"complianceStatus\",\r",
											"    \"startDate\",\r",
											"    \"completionDate\",\r",
											"    \"isUrgent\",\r",
											"    \"lastModifiedByUserId\",\r",
											"    \"lastModifiedTimestamp\",\r",
											"    \"createdByUserId\",\r",
											"    \"createdTimestamp\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test Restriction List 5\",\r\n    \"notes\": \"Test Restriction List Notes 5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/integration-restriction-list",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"integration-restriction-list"
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"queryable\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"clientId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"description\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"categoryId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"category\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"status\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"complianceStatus\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"startDate\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"completionDate\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"isUrgent\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"companies\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"dealMembers\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"lastModifiedBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"createdTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"clientId\",\r",
											"            \"name\",\r",
											"            \"description\",\r",
											"            \"categoryId\",\r",
											"            \"category\",\r",
											"            \"status\",\r",
											"            \"complianceStatus\",\r",
											"            \"startDate\",\r",
											"            \"completionDate\",\r",
											"            \"isUrgent\",\r",
											"            \"companies\",\r",
											"            \"dealMembers\",\r",
											"            \"lastModifiedByUserId\",\r",
											"            \"lastModifiedBy\",\r",
											"            \"lastModifiedTimestamp\",\r",
											"            \"createdByUserId\",\r",
											"            \"createdBy\",\r",
											"            \"createdTimestamp\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"queryable\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Response is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    if (jsonData.queryable.length > 0) {\r",
											"        var requestId = pm.request.url.path[3];\r",
											"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/integration-restriction-list/:restrictionId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"integration-restriction-list",
										":restrictionId"
									],
									"variable": [
										{
											"key": "restrictionId",
											"value": "051539d8-ab42-4c21-2f28-08d9a064a360"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test Restriction List 5 - Updated\",\r\n    \"notes\": \"Test Restriction List Notes 5 - Updated\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/integration-restriction-list/:restrictionListId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"integration-restriction-list",
										":restrictionListId"
									],
									"variable": [
										{
											"key": "restrictionListId",
											"value": "b667a5eb-c59d-41d6-c1b9-08d99ecca688"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/integration-restriction-list/:restrictionListId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"integration-restriction-list",
										":restrictionListId"
									],
									"variable": [
										{
											"key": "restrictionListId",
											"value": "6f3c8b53-a6ef-4d42-24c5-08d99dd7a86b"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Restriction List",
					"item": [
						{
							"name": "getAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"value\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"value\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var json= pm.response.json()\r",
											"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/restriction-list?$expand=employeeLevelRestrictions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"restriction-list"
									],
									"query": [
										{
											"key": "$expand",
											"value": "employeeLevelRestrictions"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"clientId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"categoryId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complianceStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"startDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completionDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isUrgent\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"lastModifiedByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModifiedTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"id\",\r",
											"    \"clientId\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"categoryId\",\r",
											"    \"status\",\r",
											"    \"complianceStatus\",\r",
											"    \"startDate\",\r",
											"    \"completionDate\",\r",
											"    \"isUrgent\",\r",
											"    \"lastModifiedByUserId\",\r",
											"    \"lastModifiedTimestamp\",\r",
											"    \"createdByUserId\",\r",
											"    \"createdTimestamp\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test Restriction List 5\",\r\n    \"notes\": \"Test Restriction List Notes 5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/restriction-list",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"restriction-list"
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"queryable\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"clientId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"description\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"categoryId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"category\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"status\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"complianceStatus\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"startDate\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"completionDate\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"isUrgent\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"companies\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"dealMembers\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"lastModifiedBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"lastModifiedTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdByUserId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"createdBy\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"createdTimestamp\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"clientId\",\r",
											"            \"name\",\r",
											"            \"description\",\r",
											"            \"categoryId\",\r",
											"            \"category\",\r",
											"            \"status\",\r",
											"            \"complianceStatus\",\r",
											"            \"startDate\",\r",
											"            \"completionDate\",\r",
											"            \"isUrgent\",\r",
											"            \"companies\",\r",
											"            \"dealMembers\",\r",
											"            \"lastModifiedByUserId\",\r",
											"            \"lastModifiedBy\",\r",
											"            \"lastModifiedTimestamp\",\r",
											"            \"createdByUserId\",\r",
											"            \"createdBy\",\r",
											"            \"createdTimestamp\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"queryable\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Response is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    if (jsonData.queryable.length > 0) {\r",
											"        var requestId = pm.request.url.path[3];\r",
											"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/restriction-list/:restrictionId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"restriction-list",
										":restrictionId"
									],
									"variable": [
										{
											"key": "restrictionId",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test Restriction List 5 - Updated\",\r\n    \"notes\": \"Test Restriction List Notes 5 - Updated\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/restriction-list/:restrictionListId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"restriction-list",
										":restrictionListId"
									],
									"variable": [
										{
											"key": "restrictionListId",
											"value": "4d995e98-3be9-4c07-24c8-08d99dd7a86b"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/restriction-list/:restrictionListId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"restriction-list",
										":restrictionListId"
									],
									"variable": [
										{
											"key": "restrictionListId",
											"value": "6f3c8b53-a6ef-4d42-24c5-08d99dd7a86b"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Use cases",
			"item": [
				{
					"name": "Deals",
					"item": [
						{
							"name": "getAll",
							"item": [
								{
									"name": "extend by companies, deal members and restrictions",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[0].restrictions[restrictionId].employeeRestriction);\r",
															"//postman.setEnvironmentVariable(\"businessUserIdQA\", \"e39b693c-6808-432b-806d-45c09d2cbbc0\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "deals-by-employee",
									"item": [
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/deals-by-employee/?$filter=(id%20eq%20{{dealId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"deals-by-employee",
														""
													],
													"query": [
														{
															"key": "$filter",
															"value": "(id%20eq%20{{dealId}})"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/deals-by-employee",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"deals-by-employee"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "deals-by-company",
									"item": [
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/deals-by-company/?$filter=(id%20eq%204A0FE6A5-C977-4213-7031-08D950031B25)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"deals-by-company",
														""
													],
													"query": [
														{
															"key": "$filter",
															"value": "(id%20eq%204A0FE6A5-C977-4213-7031-08D950031B25)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/deals-by-company",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"deals-by-company"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "get MNPIs",
									"item": [
										{
											"name": "getAll",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$filter=recordType eq 'MNPI'",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$filter",
															"value": "recordType eq 'MNPI'"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "get deals",
									"item": [
										{
											"name": "getAll",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$filter=recordType eq 'Deal'",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$filter",
															"value": "recordType eq 'Deal'"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "audit",
									"item": [
										{
											"name": "getAll",
											"item": []
										},
										{
											"name": "List all deals",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"value\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": {}\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"value\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var json= pm.response.json()\r",
															"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals{{dealId}}/audit",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals{{dealId}}",
														"audit"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "getById",
							"item": [
								{
									"name": "list existing deal",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"//Test 2\r",
															"pm.test(\"Response property matches environment variable\", function () {\r",
															"  pm.expect(pm.response.json().value[0].companies[0].dataDestructionStatus).to.eql(pm.environment.get(\"dataDestructionStatus\"));\r",
															"\r",
															"});\r",
															" \r",
															"//Test 3\r",
															"pm.test(\"Response property matches environment variable\", function () {\r",
															"  pm.expect(pm.response.json().value[0].companies[0].ndaStatus).to.eql(pm.environment.get(\"ndaStatus\"));\r",
															"});\r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[0].restrictions[restrictionId].employeeRestriction);\r",
															"//postman.setEnvironmentVariable(\"businessUserIdQA\", \"e39b693c-6808-432b-806d-45c09d2cbbc0\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Active');\r",
															"});\r",
															"\r",
															"pm.test(\"The compliance status is Needs Review\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.complianceStatus).to.eq('NeedsReview');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{randomCompanyName1}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        },\r\n         {\r\n            \"name\": \"{{randomCompanyName2}}\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName2}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "list the newly created deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"//Test 2\r",
															"pm.test(\"Response property matches environment variable\", function () {\r",
															"  pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"dealId\"));\r",
															"\r",
															"});\r",
															" \r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals(bc5a5947-eda3-43ce-65c1-08d9938c5765)?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals(bc5a5947-eda3-43ce-65c1-08d9938c5765)"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "deals-by-company",
									"item": [
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/deals-by-company/?$filter=(id%20eq%204A0FE6A5-C977-4213-7031-08D950031B25)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"deals-by-company",
														""
													],
													"query": [
														{
															"key": "$filter",
															"value": "(id%20eq%204A0FE6A5-C977-4213-7031-08D950031B25)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "deals-by-employee",
									"item": [
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/deals-by-employee/?$filter=(id%20eq%204A0FE6A5-C977-4213-7031-08D950031B25)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"deals-by-employee",
														""
													],
													"query": [
														{
															"key": "$filter",
															"value": "(id%20eq%204A0FE6A5-C977-4213-7031-08D950031B25)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "list non existing deal",
									"item": [
										{
											"name": "list the newly created deal Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/(123456789)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"(123456789)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "audit",
									"item": [
										{
											"name": "get history to an existing deal",
											"item": [
												{
													"name": "expand all",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Test 1\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"dealId\", jsonData.value[0].id);\r",
																	"postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[0].restrictions[0].employeeRestriction);\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"typeId\", jsonData.value[0].companies[0].typeId);\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[0].categoryId);\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[0].dealMembers[0].memberId);\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", jsonData.value[0].dealMembers[0].memberType);\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"memberId\", jsonData.value[0].dealMembers[1].memberId);\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"memberType\", jsonData.value[0].dealMembers[1].memberType);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"v1",
																"deals"
															],
															"query": [
																{
																	"key": "$expand",
																	"value": "restrictions,dealMembers,companies"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Create a new deal",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Test 1\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
																	"\r",
																	"    var jsonData =pm.response.json();\r",
																	"pm.test(\"The deal status is active\", function(){\r",
																	"pm.expect(jsonData.isDraft).to.eq(true);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"",
																	"",
																	"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
																	"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
																	"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
																	"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
																	"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
																	"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
																	"",
																	"",
																	"",
																	"const uuid = Math.random().toString(36).substring(2, 15) +",
																	"        Math.random().toString(36).substring(2, 15);",
																	"const randomEmail =  uuid + \"@emaill.com\";",
																	"pm.environment.set(\"randomEmail\", randomEmail)",
																	"",
																	"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
																	"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
																	"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
																	"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
																	"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
																	"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
																	"",
																	"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
																	"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
																	"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
																	"",
																	"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
																	"//         pm.expect(err).to.not.be.ok;",
																	"//         pm.expect(res).to.have.property('code', 200);",
																	"//         pm.expect(res).to.have.property('status', 'OK');",
																	"//     });"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": true,\r\n     \"companies\": [{\r\n             \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        },\r\n         {\r\n            \"name\": \"{{randomCompanyName2}}\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName2}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/v1/deals",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"v1",
																"deals"
															]
														}
													},
													"response": []
												},
												{
													"name": "audit",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Test 1\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}/audit",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"v1",
																"deals",
																"{{dealId}}",
																"audit"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "get history to a non existing deal",
											"item": [
												{
													"name": "audit",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Test 1\r",
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/v1/deals/(123456)/audit",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"v1",
																"deals",
																"(123456)",
																"audit"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "create",
							"item": [
								{
									"name": "create a draft deal with all steps",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\", \"AllEmployees\");\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"\r",
															"// postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"//      jsonData.value[valueId].restrictions[restrictionId] \r",
															"//      ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"//      : null);\r",
															"// console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"//      ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"//      : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": true,\r\n     \"companies\": [{\r\n             \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a draft deal without companies",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": true,\r\n     \"companies\": [],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        \r\n           \r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a draft deal without deal members",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": true,\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }\r\n        ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                \r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a draft deal without all required fields on step 1",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": true,\r\n     \"companies\": [],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        \r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a deal with empty visibilty field",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        \r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a deal without a name",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        },\r\n         {\r\n            \"name\": \"{{randomCompanyName2}}\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a deal without description",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a deal without category",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"\",\r\n    \"status\": \"{{dealStatus}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        \r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a deal without deal status",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a deal without deal start date",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a deal without internal deal lead",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [],\r\n            \"companyAdvisees\": [],\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a deal without company",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName2}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a deal with all four steps filled",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"recordType\": \"Deal\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"clientId\", jsonData.clientId)\r",
															"postman.setEnvironmentVariable(\"recordType\", jsonData.recordType)\r",
															"postman.setEnvironmentVariable(\"lastModifiedByUserId\", jsonData.lastModifiedByUserId)\r",
															"postman.setEnvironmentVariable(\"lastModifiedTimestamp\", jsonData.lastModifiedTimestamp)\r",
															"postman.setEnvironmentVariable(\"createdByUserId\", jsonData.createdByUserId)\r",
															"postman.setEnvironmentVariable(\"createdTimestamp\", jsonData.createdTimestamp)\r",
															"postman.setEnvironmentVariable(\"company1Id\", jsonData.companies[0].id) //it is ok if only 1 company\r",
															"postman.setEnvironmentVariable(\"company2Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[1].id : null)\r",
															"postman.setEnvironmentVariable(\"company3Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[2].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent1Id\", jsonData.companies[0].contactsUnderTent[0] ? jsonData.companies[0].contactsUnderTent[0].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent2Id\", jsonData.companies[0].contactsUnderTent[1] ? jsonData.companies[0].contactsUnderTent[1].id : null)\r",
															"postman.setEnvironmentVariable(\"dealMemberVisibilityId\", jsonData.dealMembers[0].id)\r",
															"postman.setEnvironmentVariable(\"dealMemberInternalId\", jsonData.dealMembers[1].id) //might cause issues when more than one visibility user\r",
															"postman.setEnvironmentVariable(\"restriction1Id\", jsonData.restrictions[0].id) //for the 1st restriction only\r",
															"postman.setEnvironmentVariable(\"isSyncToMarketAbuse1\", jsonData.restrictions[0].isSyncToMarketAbuse) \r",
															"postman.setEnvironmentVariable(\"companyRestrictions1Id\", jsonData.restrictions[0].companyRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"memberRestrictions1Id\", jsonData.restrictions[0].memberRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"isDraftAlwaysFalse\", \"false\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Business user flow - create a deal with all 3 steps",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{businessUserToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal (QA BU id as recordvisibilty user)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"acceptanceStatus\": \"No\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": true,\r\n     \"companies\": [{\r\n            \"name\": \"{{randomCompanyName1}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ]\r\n    \r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{businessUserToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Business user flow - create a deal with aRestricitons",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{businessUserToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "create  draft MNPI record with step 1 only",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"postman.setEnvironmentVariable(\"typeIdMNPI\", \"49870c48-e77b-4a64-8052-eedae585ac49\");\r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryIdMNPI\", \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\");\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "set MNPI props",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"categoryIdMNPI\", \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\"); //QA\r",
															"//postman.setEnvironmentVariable(\"categoryIdMNPI\", \"e5994f98-9d25-ec11-8408-0e84430236e3\"); //UAT\r",
															"//postman.setEnvironmentVariable(\"typeIdMNPI\", \"49870c48-e77b-4a64-8052-eedae585ac49\");// QA\r",
															"postman.setEnvironmentVariable(\"typeIdMNPI\", \"1f92195e-40c1-4ca4-baa0-66599b567983\");// UAT\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryIdMNPI}}\",\r\n    \"status\": \"Inactive\",\r\n     \"recordType\": \"{{recordTypeMNPI}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"acceptanceStatus\": \"Yes\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": true,\r\n     \"companies\": [],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        \r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The deal name contains updated\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.recordType).to.contain(\"MNPI\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create  draft MNPI record without categoryId on step 1",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"postman.setEnvironmentVariable(\"typeIdMNPI\", \"49870c48-e77b-4a64-8052-eedae585ac49\");\r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryIdMNPI\", \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\");\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "set MNPI props",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"//postman.setEnvironmentVariable(\"categoryIdMNPI\", \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\"); //QA\r",
															"postman.setEnvironmentVariable(\"categoryIdMNPI\", \"e5994f98-9d25-ec11-8408-0e84430236e3\"); //UAT\r",
															"//postman.setEnvironmentVariable(\"typeIdMNPI\", \"49870c48-e77b-4a64-8052-eedae585ac49\");// QA\r",
															"postman.setEnvironmentVariable(\"typeIdMNPI\", \"1f92195e-40c1-4ca4-baa0-66599b567983\");// UAT\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"status\": \"Inactive\",\r\n     \"recordType\": \"{{recordTypeMNPI}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": true,\r\n     \"companies\": [],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        \r\n        }\r\n        \r\n    ],\r\n    \"restrictions\": [\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The deal name contains updated\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.recordType).to.contain(\"MNPI\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create MNPI record",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"postman.setEnvironmentVariable(\"typeIdMNPI\", \"49870c48-e77b-4a64-8052-eedae585ac49\");\r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryIdMNPI\", \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\");\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "set MNPI props",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"categoryIdMNPI\", \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\"); //QA\r",
															"//postman.setEnvironmentVariable(\"categoryIdMNPI\", \"e5994f98-9d25-ec11-8408-0e84430236e3\"); //UAT\r",
															"postman.setEnvironmentVariable(\"typeIdMNPI\", \"49870c48-e77b-4a64-8052-eedae585ac49\");// QA\r",
															"//postman.setEnvironmentVariable(\"typeIdMNPI\", \"1f92195e-40c1-4ca4-baa0-66599b567983\");// UAT\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\",\r\n    \"status\": \"Inactive\",\r\n     \"recordType\": \"MNPI\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeIdMNPI}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{EmployeesInvolved}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"EmployeesInvolved\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{EmployeesInvolved}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The deal name contains updated\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.recordType).to.contain(\"MNPI\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CU create MNPI record",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"postman.setEnvironmentVariable(\"typeIdMNPI\", \"49870c48-e77b-4a64-8052-eedae585ac49\");\r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryIdMNPI\", \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\");\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "set MNPI props",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"categoryIdMNPI\", \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\"); //QA\r",
															"//postman.setEnvironmentVariable(\"categoryIdMNPI\", \"e5994f98-9d25-ec11-8408-0e84430236e3\"); //UAT\r",
															"postman.setEnvironmentVariable(\"typeIdMNPI\", \"49870c48-e77b-4a64-8052-eedae585ac49\");// QA\r",
															"//postman.setEnvironmentVariable(\"typeIdMNPI\", \"1f92195e-40c1-4ca4-baa0-66599b567983\");// UAT\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\",\r\n    \"status\": \"Inactive\",\r\n     \"recordType\": \"MNPI\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"acceptanceStatus\": \"Yes\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeIdMNPI}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{EmployeesInvolved}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"EmployeesInvolved\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{EmployeesInvolved}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The deal name contains updated\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.recordType).to.contain(\"MNPI\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{complianceUserToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "BU create MNPI record",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"postman.setEnvironmentVariable(\"typeIdMNPI\", \"49870c48-e77b-4a64-8052-eedae585ac49\");\r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryIdMNPI\", \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\");\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "set MNPI props",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"categoryIdMNPI\", \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\"); //QA\r",
															"//postman.setEnvironmentVariable(\"categoryIdMNPI\", \"e5994f98-9d25-ec11-8408-0e84430236e3\"); //UAT\r",
															"postman.setEnvironmentVariable(\"typeIdMNPI\", \"49870c48-e77b-4a64-8052-eedae585ac49\");// QA\r",
															"//postman.setEnvironmentVariable(\"typeIdMNPI\", \"1f92195e-40c1-4ca4-baa0-66599b567983\");// UAT\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\",\r\n    \"status\": \"Inactive\",\r\n     \"recordType\": \"MNPI\",\r\n     \"acceptanceStatus\": \"No\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeIdMNPI}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{EmployeesInvolved}}\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The deal name contains updated\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.recordType).to.contain(\"MNPI\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{businessUserToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "put",
							"item": [
								{
									"name": "update all steps",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"clientId\", jsonData.clientId)\r",
															"postman.setEnvironmentVariable(\"recordType\", jsonData.recordType)\r",
															"postman.setEnvironmentVariable(\"lastModifiedByUserId\", jsonData.lastModifiedByUserId)\r",
															"postman.setEnvironmentVariable(\"lastModifiedTimestamp\", jsonData.lastModifiedTimestamp)\r",
															"postman.setEnvironmentVariable(\"createdByUserId\", jsonData.createdByUserId)\r",
															"postman.setEnvironmentVariable(\"createdTimestamp\", jsonData.createdTimestamp)\r",
															"postman.setEnvironmentVariable(\"company1Id\", jsonData.companies[0].id) //it is ok if only 1 company\r",
															"postman.setEnvironmentVariable(\"company2Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[1].id : null)\r",
															"postman.setEnvironmentVariable(\"company3Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[2].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent1Id\", jsonData.companies[0].contactsUnderTent[0] ? jsonData.companies[0].contactsUnderTent[0].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent2Id\", jsonData.companies[0].contactsUnderTent[1] ? jsonData.companies[0].contactsUnderTent[1].id : null)\r",
															"postman.setEnvironmentVariable(\"dealMemberVisibilityId\", jsonData.dealMembers[0].id)\r",
															"postman.setEnvironmentVariable(\"dealMemberInternalId\", jsonData.dealMembers[1].id) //might cause issues when more than one visibility user\r",
															"postman.setEnvironmentVariable(\"restriction1Id\", jsonData.restrictions[0].id) //for the 1st restriction only\r",
															"postman.setEnvironmentVariable(\"isSyncToMarketAbuse1\", jsonData.restrictions[0].isSyncToMarketAbuse) \r",
															"postman.setEnvironmentVariable(\"companyRestrictions1Id\", jsonData.restrictions[0].companyRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"memberRestrictions1Id\", jsonData.restrictions[0].memberRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"isDraftAlwaysFalse\", \"false\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"randomUpdatedDealName\", _.random(1, 1000) +\" \" + \"Updated API deal\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n     \"id\": \"{{dealId}}\",\r\n    \"clientId\": {{clientId}},\r\n    \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"name\": \"{{randomUpdatedDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraftAlwaysFalse}},\r\n     \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n    \"createdByUserId\": \"{{createdByUserId}}\",\r\n    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n     \"companies\": [{\r\n          \"id\": \"{{company1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n             \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"id\": \"{{contactsUnderTent1Id}}\",\r\n                \"clientId\": {{clientId}},\r\n                \"companyId\": \"{{company1Id}}\",\r\n                \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                \"createdByUserId\": \"{{createdByUserId}}\",\r\n                \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\"\r\n                \r\n            }\r\n            ]\r\n            \r\n           \r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\",\r\n             \"id\": \"{{dealMemberVisibilityId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\",\r\n            \"id\": \"{{dealMemberInternalId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n             \"id\": \"{{restriction1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"isSyncToMarketAbuse\": {{isSyncToMarketAbuse1}},\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n\r\n            \"companyRestrictions\": [{\r\n                    \"id\": \"{{companyRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"id\": \"{{memberRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"dealMemberId\": \"{{dealMemberInternalId}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                        }\r\n               \r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The deal name contains updated\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.name).to.contain(\"Updated\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update step 1",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"clientId\", jsonData.clientId)\r",
															"postman.setEnvironmentVariable(\"recordType\", jsonData.recordType)\r",
															"postman.setEnvironmentVariable(\"lastModifiedByUserId\", jsonData.lastModifiedByUserId)\r",
															"postman.setEnvironmentVariable(\"lastModifiedTimestamp\", jsonData.lastModifiedTimestamp)\r",
															"postman.setEnvironmentVariable(\"createdByUserId\", jsonData.createdByUserId)\r",
															"postman.setEnvironmentVariable(\"createdTimestamp\", jsonData.createdTimestamp)\r",
															"postman.setEnvironmentVariable(\"company1Id\", jsonData.companies[0].id) //it is ok if only 1 company\r",
															"postman.setEnvironmentVariable(\"company2Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[1].id : null)\r",
															"postman.setEnvironmentVariable(\"company3Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[2].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent1Id\", jsonData.companies[0].contactsUnderTent[0] ? jsonData.companies[0].contactsUnderTent[0].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent2Id\", jsonData.companies[0].contactsUnderTent[1] ? jsonData.companies[0].contactsUnderTent[1].id : null)\r",
															"postman.setEnvironmentVariable(\"dealMemberVisibilityId\", jsonData.dealMembers[0].id)\r",
															"postman.setEnvironmentVariable(\"dealMemberInternalId\", jsonData.dealMembers[1].id) //might cause issues when more than one visibility user\r",
															"postman.setEnvironmentVariable(\"restriction1Id\", jsonData.restrictions[0].id) //for the 1st restriction only\r",
															"postman.setEnvironmentVariable(\"isSyncToMarketAbuse1\", jsonData.restrictions[0].isSyncToMarketAbuse) \r",
															"postman.setEnvironmentVariable(\"companyRestrictions1Id\", jsonData.restrictions[0].companyRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"memberRestrictions1Id\", jsonData.restrictions[0].memberRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"isDraftAlwaysFalse\", \"false\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"randomUpdatedDealName\", _.random(1, 1000) +\" \" + \"Updated API deal\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n     \"id\": \"{{dealId}}\",\r\n    \"clientId\": {{clientId}},\r\n    \"recordType\": \"{{recordType}}\",\r\n    \"name\": \"{{randomUpdatedDealName}}\",\r\n    \"description\": \"updated description\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": true,\r\n    \"isDraft\": false,\r\n     \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n    \"createdByUserId\": \"{{createdByUserId}}\",\r\n    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n     \"companies\": [{\r\n          \"id\": \"{{company1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n             \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"id\": \"{{contactsUnderTent1Id}}\",\r\n                \"clientId\": {{clientId}},\r\n                \"companyId\": \"{{company1Id}}\",\r\n                \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                \"createdByUserId\": \"{{createdByUserId}}\",\r\n                \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\"\r\n                \r\n            }\r\n            ]}]\r\n    ,\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\",\r\n             \"id\": \"{{dealMemberVisibilityId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\",\r\n            \"id\": \"{{dealMemberInternalId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n             \"id\": \"{{restriction1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"isSyncToMarketAbuse\": {{isSyncToMarketAbuse1}},\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n\r\n            \"companyRestrictions\": [{\r\n                    \"id\": \"{{companyRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"id\": \"{{memberRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"dealMemberId\": \"{{dealMemberInternalId}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                        }\r\n               \r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The deal name contains updated\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.name).to.contain(\"Updated\")\r",
															"});\r",
															"\r",
															"pm.test(\"The deal status is paused\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.contain(\"Paused\")\r",
															"});\r",
															"\r",
															"pm.test(\"The deal is urgent\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.isUrgent).to.eq(true)\r",
															"});\r",
															"\r",
															"pm.test(\"The deal is not draft\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.isDraft).to.eq(false)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update step 2 - Add new deal member",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"postman.setEnvironmentVariable(\"clientId\", jsonData.clientId)\r",
															"postman.setEnvironmentVariable(\"recordType\", jsonData.recordType)\r",
															"postman.setEnvironmentVariable(\"lastModifiedByUserId\", jsonData.lastModifiedByUserId)\r",
															"postman.setEnvironmentVariable(\"lastModifiedTimestamp\", jsonData.lastModifiedTimestamp)\r",
															"postman.setEnvironmentVariable(\"createdByUserId\", jsonData.createdByUserId)\r",
															"postman.setEnvironmentVariable(\"createdTimestamp\", jsonData.createdTimestamp)\r",
															"postman.setEnvironmentVariable(\"company1Id\", jsonData.companies[0].id) //it is ok if only 1 company\r",
															"postman.setEnvironmentVariable(\"company2Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[1].id : null)\r",
															"postman.setEnvironmentVariable(\"company3Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[2].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent1Id\", jsonData.companies[0].contactsUnderTent[0] ? jsonData.companies[0].contactsUnderTent[0].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent2Id\", jsonData.companies[0].contactsUnderTent[1] ? jsonData.companies[0].contactsUnderTent[1].id : null)\r",
															"postman.setEnvironmentVariable(\"dealMemberVisibilityId\", jsonData.dealMembers[0].id)\r",
															"postman.setEnvironmentVariable(\"dealMemberInternalId\", jsonData.dealMembers[1].id) //might cause issues when more than one visibility user\r",
															"postman.setEnvironmentVariable(\"restriction1Id\", jsonData.restrictions[0].id) //for the 1st restriction only\r",
															"postman.setEnvironmentVariable(\"isSyncToMarketAbuse1\", jsonData.restrictions[0].isSyncToMarketAbuse) \r",
															"postman.setEnvironmentVariable(\"companyRestrictions1Id\", jsonData.restrictions[0].companyRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"memberRestrictions1Id\", jsonData.restrictions[0].memberRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"isDraftAlwaysFalse\", \"false\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"randomUpdatedDealName\", _.random(1, 1000) +\" \" + \"Updated API deal\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n     \"id\": \"{{dealId}}\",\r\n    \"clientId\": {{clientId}},\r\n    \"recordType\": \"{{recordType}}\",\r\n    \"name\": \"{{randomUpdatedDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": \"{{isDraftAlwaysFalse}}\",\r\n     \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n    \"createdByUserId\": \"{{createdByUserId}}\",\r\n    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n     \"companies\": [{\r\n          \"id\": \"{{company1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n             \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"id\": \"{{contactsUnderTent1Id}}\",\r\n                \"clientId\": {{clientId}},\r\n                \"companyId\": \"{{company1Id}}\",\r\n                \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                \"createdByUserId\": \"{{createdByUserId}}\",\r\n                \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\"\r\n                \r\n            }\r\n            ]}\r\n    ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\",\r\n             \"id\": \"{{dealMemberVisibilityId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"980d61d4-7833-4161-9646-1e40063440d9\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n            \r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\",\r\n            \"id\": \"{{dealMemberInternalId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n             \"id\": \"{{restriction1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"isSyncToMarketAbuse\": {{isSyncToMarketAbuse1}},\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n\r\n            \"companyRestrictions\": [{\r\n                    \"id\": \"{{companyRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"id\": \"{{memberRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"dealMemberId\": \"{{dealMemberInternalId}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                        }\r\n               \r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"New deal member is added\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.dealMembers[2].memberId).to.eq(\"980d61d4-7833-4161-9646-1e40063440d9\")\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update step 3 - Add new company",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"postman.setEnvironmentVariable(\"clientId\", jsonData.clientId)\r",
															"postman.setEnvironmentVariable(\"recordType\", jsonData.recordType)\r",
															"postman.setEnvironmentVariable(\"lastModifiedByUserId\", jsonData.lastModifiedByUserId)\r",
															"postman.setEnvironmentVariable(\"lastModifiedTimestamp\", jsonData.lastModifiedTimestamp)\r",
															"postman.setEnvironmentVariable(\"createdByUserId\", jsonData.createdByUserId)\r",
															"postman.setEnvironmentVariable(\"createdTimestamp\", jsonData.createdTimestamp)\r",
															"postman.setEnvironmentVariable(\"company1Id\", jsonData.companies[0].id) //it is ok if only 1 company\r",
															"postman.setEnvironmentVariable(\"company2Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[1].id : null)\r",
															"postman.setEnvironmentVariable(\"company3Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[2].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent1Id\", jsonData.companies[0].contactsUnderTent[0] ? jsonData.companies[0].contactsUnderTent[0].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent2Id\", jsonData.companies[0].contactsUnderTent[1] ? jsonData.companies[0].contactsUnderTent[1].id : null)\r",
															"postman.setEnvironmentVariable(\"dealMemberVisibilityId\", jsonData.dealMembers[0].id)\r",
															"postman.setEnvironmentVariable(\"dealMemberInternalId\", jsonData.dealMembers[1].id) //might cause issues when more than one visibility user\r",
															"postman.setEnvironmentVariable(\"restriction1Id\", jsonData.restrictions[0].id) //for the 1st restriction only\r",
															"postman.setEnvironmentVariable(\"isSyncToMarketAbuse1\", jsonData.restrictions[0].isSyncToMarketAbuse) \r",
															"postman.setEnvironmentVariable(\"companyRestrictions1Id\", jsonData.restrictions[0].companyRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"memberRestrictions1Id\", jsonData.restrictions[0].memberRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"isDraftAlwaysFalse\", \"false\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"randomUpdatedDealName\", _.random(1, 1000) +\" \" + \"Updated API deal\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n     \"id\": \"{{dealId}}\",\r\n    \"clientId\": {{clientId}},\r\n    \"recordType\": \"{{recordType}}\",\r\n    \"name\": \"{{randomUpdatedDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": \"{{isDraftAlwaysFalse}}\",\r\n     \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n    \"createdByUserId\": \"{{createdByUserId}}\",\r\n    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n     \"companies\": [{\r\n          \"id\": \"{{company1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n             \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"id\": \"{{contactsUnderTent1Id}}\",\r\n                \"clientId\": {{clientId}},\r\n                \"companyId\": \"{{company1Id}}\",\r\n                \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                \"createdByUserId\": \"{{createdByUserId}}\",\r\n                \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\"\r\n                \r\n            }\r\n            ]},\r\n            {\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"ALARMFORCE INDS INC\",\r\n            \"externalId\": \"3ec49d9c-5502-eb11-8140-000c29887906\",\r\n            \"cusip\": \"01165L953\",\r\n            \"isin\": \"CA01165L1022\",\r\n            \"typeId\": \"03be7d38-c469-423c-a60a-dc7e66305fd9\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"status\": \"Active\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"ndaRequestedDate\": null,\r\n            \"ndaCompletedDate\": null,\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"dataDestructionRequestedDate\": null,\r\n            \"dataDestructionCompletedDate\": null, \r\n            \"contactsUnderTent\": []}\r\n    ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\",\r\n             \"id\": \"{{dealMemberVisibilityId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        },\r\n        \r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\",\r\n            \"id\": \"{{dealMemberInternalId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n             \"id\": \"{{restriction1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"isSyncToMarketAbuse\": {{isSyncToMarketAbuse1}},\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n\r\n            \"companyRestrictions\": [{\r\n                    \"id\": \"{{companyRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"id\": \"{{memberRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"dealMemberId\": \"{{dealMemberInternalId}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                        }\r\n               \r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The new company is added\", function(){\r",
															"pm.expect(jsonData.companies[1].name).to.eq(\"ALARMFORCE INDS INC\");\r",
															"})\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update step 4 - Add new restriction",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"postman.setEnvironmentVariable(\"clientId\", jsonData.clientId)\r",
															"postman.setEnvironmentVariable(\"recordType\", jsonData.recordType)\r",
															"postman.setEnvironmentVariable(\"lastModifiedByUserId\", jsonData.lastModifiedByUserId)\r",
															"postman.setEnvironmentVariable(\"lastModifiedTimestamp\", jsonData.lastModifiedTimestamp)\r",
															"postman.setEnvironmentVariable(\"createdByUserId\", jsonData.createdByUserId)\r",
															"postman.setEnvironmentVariable(\"createdTimestamp\", jsonData.createdTimestamp)\r",
															"postman.setEnvironmentVariable(\"company1Id\", jsonData.companies[0].id) //it is ok if only 1 company\r",
															"postman.setEnvironmentVariable(\"company2Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[1].id : null)\r",
															"postman.setEnvironmentVariable(\"company3Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[2].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent1Id\", jsonData.companies[0].contactsUnderTent[0] ? jsonData.companies[0].contactsUnderTent[0].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent2Id\", jsonData.companies[0].contactsUnderTent[1] ? jsonData.companies[0].contactsUnderTent[1].id : null)\r",
															"postman.setEnvironmentVariable(\"dealMemberVisibilityId\", jsonData.dealMembers[0].id)\r",
															"postman.setEnvironmentVariable(\"dealMemberInternalId\", jsonData.dealMembers[1].id) //might cause issues when more than one visibility user\r",
															"postman.setEnvironmentVariable(\"restriction1Id\", jsonData.restrictions[0].id) //for the 1st restriction only\r",
															"postman.setEnvironmentVariable(\"isSyncToMarketAbuse1\", jsonData.restrictions[0].isSyncToMarketAbuse) \r",
															"postman.setEnvironmentVariable(\"companyRestrictions1Id\", jsonData.restrictions[0].companyRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"memberRestrictions1Id\", jsonData.restrictions[0].memberRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"isDraftAlwaysFalse\", \"false\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"randomUpdatedDealName\", _.random(1, 1000) +\" \" + \"Updated API deal\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"{{dealId}}\",\r\n    \"clientId\": {{clientId}},\r\n    \"recordType\": \"{{recordType}}\",\r\n    \"name\": \"{{randomUpdatedDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": \"{{isDraftAlwaysFalse}}\",\r\n    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n    \"createdByUserId\": \"{{createdByUserId}}\",\r\n    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n    \"companies\": [\r\n        {\r\n            \"id\": \"{{company1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\",\r\n            \"contactsUnderTent\": [\r\n                {\r\n                    \"id\": \"{{contactsUnderTent1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n                    \"name\": \"{{contactsUnderTentName}}\",\r\n                    \"title\": \"{{contactsUnderTentTitle}}\",\r\n                    \"email\": \"{{$randomEmail}}\",\r\n                    \"addedDate\": \"{{contactAddedDate}}\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"ALARMFORCE INDS INC\",\r\n            \"externalId\": \"3ec49d9c-5502-eb11-8140-000c29887906\",\r\n            \"cusip\": \"01165L953\",\r\n            \"isin\": \"CA01165L1022\",\r\n            \"typeId\": \"03be7d38-c469-423c-a60a-dc7e66305fd9\",\r\n            \"status\": \"Active\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \r\n            \"ndaRequestedDate\": null,\r\n            \"ndaCompletedDate\": null,\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"dataDestructionRequestedDate\": null,\r\n            \"dataDestructionCompletedDate\": null,\r\n            \"lastModifiedByUserId\": \"d9999ced-bb64-43fc-b085-6ee83eb949e4\",\r\n            \"lastModifiedTimestamp\": \"2021-10-13T13:40:43.1716504Z\",\r\n            \"createdByUserId\": \"d9999ced-bb64-43fc-b085-6ee83eb949e4\",\r\n            \"createdTimestamp\": \"2021-10-13T13:40:43.1716501Z\",\r\n            \"contactsUnderTent\": []\r\n        }\r\n    ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\",\r\n            \"id\": \"{{dealMemberVisibilityId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"980d61d4-7833-4161-9646-1e40063440d9\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\",\r\n            \"id\": \"{{dealMemberInternalId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"id\": \"{{restriction1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"isSyncToMarketAbuse\": {{isSyncToMarketAbuse1}},\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n            \"companyRestrictions\": [\r\n                {\r\n                    \"id\": \"{{companyRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"id\": \"{{memberRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"dealMemberId\": \"{{dealMemberInternalId}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"clientId\": 3396,\r\n            \"dealId\": \"5861de60-f71f-4341-19f1-08d983ea8c4b\",\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"startDate\": \"2021-08-29T21:00:00+00:00\",\r\n            \"endDate\": null,\r\n            \"isSyncToMarketAbuse\": false,\r\n            \"employeeRestriction\": \"InternalDealLead, InternalDealAssociates\",\r\n            \"companyRestrictions\": [\r\n                {\r\n                   \r\n                    \"company\": {\r\n                    \"name\": \"ALARMFORCE INDS INC\"\r\n                    }\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\": {\r\n                        \"memberId\": \"980d61d4-7833-4161-9646-1e40063440d9\",\r\n                        \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The new restriction is added\", function(){\r",
															"pm.expect(jsonData.restrictions[1].name).to.eq(\"ControlRoom Restriction\");\r",
															"})\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update step 4 - Add new members to existing restriction",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"postman.setEnvironmentVariable(\"clientId\", jsonData.clientId)\r",
															"postman.setEnvironmentVariable(\"recordType\", jsonData.recordType)\r",
															"postman.setEnvironmentVariable(\"lastModifiedByUserId\", jsonData.lastModifiedByUserId)\r",
															"postman.setEnvironmentVariable(\"lastModifiedTimestamp\", jsonData.lastModifiedTimestamp)\r",
															"postman.setEnvironmentVariable(\"createdByUserId\", jsonData.createdByUserId)\r",
															"postman.setEnvironmentVariable(\"createdTimestamp\", jsonData.createdTimestamp)\r",
															"postman.setEnvironmentVariable(\"company1Id\", jsonData.companies[0].id) //it is ok if only 1 company\r",
															"postman.setEnvironmentVariable(\"company2Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[1].id : null)\r",
															"postman.setEnvironmentVariable(\"company3Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[2].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent1Id\", jsonData.companies[0].contactsUnderTent[0] ? jsonData.companies[0].contactsUnderTent[0].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent2Id\", jsonData.companies[0].contactsUnderTent[1] ? jsonData.companies[0].contactsUnderTent[1].id : null)\r",
															"postman.setEnvironmentVariable(\"dealMemberVisibilityId\", jsonData.dealMembers[0].id)\r",
															"postman.setEnvironmentVariable(\"dealMemberInternalId\", jsonData.dealMembers[1].id) //might cause issues when more than one visibility user\r",
															"postman.setEnvironmentVariable(\"restriction1Id\", jsonData.restrictions[0].id) //for the 1st restriction only\r",
															"postman.setEnvironmentVariable(\"isSyncToMarketAbuse1\", jsonData.restrictions[0].isSyncToMarketAbuse) \r",
															"postman.setEnvironmentVariable(\"companyRestrictions1Id\", jsonData.restrictions[0].companyRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"memberRestrictions1Id\", jsonData.restrictions[0].memberRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"isDraftAlwaysFalse\", \"false\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"randomUpdatedDealName\", _.random(1, 1000) +\" \" + \"Updated API deal\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"{{dealId}}\",\r\n    \"clientId\": {{clientId}},\r\n    \"recordType\": \"{{recordType}}\",\r\n    \"name\": \"{{randomUpdatedDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": \"{{isDraftAlwaysFalse}}\",\r\n    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n    \"createdByUserId\": \"{{createdByUserId}}\",\r\n    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n    \"companies\": [\r\n        {\r\n            \"id\": \"{{company1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\",\r\n            \"contactsUnderTent\": [\r\n                {\r\n                    \"id\": \"{{contactsUnderTent1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n                    \"name\": \"{{contactsUnderTentName}}\",\r\n                    \"title\": \"{{contactsUnderTentTitle}}\",\r\n                    \"email\": \"{{$randomEmail}}\",\r\n                    \"addedDate\": \"{{contactAddedDate}}\"\r\n                }\r\n            ]\r\n        }\r\n        \r\n    ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\",\r\n            \"id\": \"{{dealMemberVisibilityId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        },\r\n        \r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\",\r\n            \"id\": \"{{dealMemberInternalId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"id\": \"{{restriction1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"isSyncToMarketAbuse\": {{isSyncToMarketAbuse1}},\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n            \"companyRestrictions\": [\r\n                {\r\n                    \"id\": \"{{companyRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"id\": \"{{memberRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"dealMemberId\": \"{{dealMemberInternalId}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                },\r\n                 {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n                         \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"A deal member is restricted\", function(){\r",
															"pm.expect(jsonData.restrictions[0].memberRestrictions[0]).to.haveOwnPropertyDescriptor('dealMemberId')\r",
															"})\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update non existing deal",
									"item": [
										{
											"name": "update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"randomUpdatedDealName\", _.random(1, 1000) +\" \" + \"Updated API deal\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"{{dealId}}\",\r\n    \"clientId\": {{clientId}},\r\n    \"recordType\": \"{{recordType}}\",\r\n    \"name\": \"{{randomUpdatedDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": \"{{isDraftAlwaysFalse}}\",\r\n    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n    \"createdByUserId\": \"{{createdByUserId}}\",\r\n    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n    \"companies\": [\r\n        {\r\n            \"id\": \"{{company1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\",\r\n            \"contactsUnderTent\": [\r\n                {\r\n                    \"id\": \"{{contactsUnderTent1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n                    \"name\": \"{{contactsUnderTentName}}\",\r\n                    \"title\": \"{{contactsUnderTentTitle}}\",\r\n                    \"email\": \"{{$randomEmail}}\",\r\n                    \"addedDate\": \"{{contactAddedDate}}\"\r\n                }\r\n            ]\r\n        }\r\n        \r\n    ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\",\r\n            \"id\": \"{{dealMemberVisibilityId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        },\r\n        \r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\",\r\n            \"id\": \"{{dealMemberInternalId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"id\": \"{{restriction1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"isSyncToMarketAbuse\": {{isSyncToMarketAbuse1}},\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n            \"companyRestrictions\": [\r\n                {\r\n                    \"id\": \"{{companyRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"id\": \"{{memberRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"dealMemberId\": \"{{dealMemberInternalId}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                },\r\n                 {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n                         \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/(123456)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"(123456)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update MNPI record",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"     \r",
															"\r",
															"   \r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "set MNPI props",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"categoryIdMNPI\", \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\");\r",
															"postman.setEnvironmentVariable(\"typeIdMNPI\", \"49870c48-e77b-4a64-8052-eedae585ac49\");\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\",\r\n    \"status\": \"{{dealStatus}}\",\r\n     \"recordType\": \"{{recordTypeMNPI}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"49870c48-e77b-4a64-8052-eedae585ac49\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"EmployeesInvolved\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"AllEmployees\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"EmployeesInvolved\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"postman.setEnvironmentVariable(\"clientId\", jsonData.clientId)\r",
															"postman.setEnvironmentVariable(\"recordType\", jsonData.recordType)\r",
															"postman.setEnvironmentVariable(\"lastModifiedByUserId\", jsonData.lastModifiedByUserId)\r",
															"postman.setEnvironmentVariable(\"lastModifiedTimestamp\", jsonData.lastModifiedTimestamp)\r",
															"postman.setEnvironmentVariable(\"createdByUserId\", jsonData.createdByUserId)\r",
															"postman.setEnvironmentVariable(\"createdTimestamp\", jsonData.createdTimestamp)\r",
															"postman.setEnvironmentVariable(\"company1Id\", jsonData.companies[0].id) //it is ok if only 1 company\r",
															"postman.setEnvironmentVariable(\"company2Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[1].id : null)\r",
															"postman.setEnvironmentVariable(\"company3Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[2].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent1Id\", jsonData.companies[0].contactsUnderTent[0] ? jsonData.companies[0].contactsUnderTent[0].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent2Id\", jsonData.companies[0].contactsUnderTent[1] ? jsonData.companies[0].contactsUnderTent[1].id : null)\r",
															"postman.setEnvironmentVariable(\"dealMemberVisibilityId\", jsonData.dealMembers[0].id)\r",
															"postman.setEnvironmentVariable(\"dealMemberInternalId\", jsonData.dealMembers[1].id) //might cause issues when more than one visibility user\r",
															"postman.setEnvironmentVariable(\"restriction1Id\", jsonData.restrictions[0].id) //for the 1st restriction only\r",
															"postman.setEnvironmentVariable(\"isSyncToMarketAbuse1\", jsonData.restrictions[0].isSyncToMarketAbuse) \r",
															"postman.setEnvironmentVariable(\"companyRestrictions1Id\", jsonData.restrictions[0].companyRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"memberRestrictions1Id\", jsonData.restrictions[0].memberRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"isDraftAlwaysFalse\", \"false\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"randomUpdatedDealName\", _.random(1, 1000) +\" \" + \"Updated API deal\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n     \"id\": \"{{dealId}}\",\r\n    \"clientId\": {{clientId}},\r\n    \"recordType\": \"MNPI\",\r\n    \"name\": \"{{randomUpdatedDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraftAlwaysFalse}},\r\n     \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n    \"createdByUserId\": \"{{createdByUserId}}\",\r\n    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n     \"companies\": [{\r\n          \"id\": \"{{company1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n             \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"49870c48-e77b-4a64-8052-eedae585ac49\",\r\n            \"contactsUnderTent\": [\r\n            ]\r\n            \r\n           \r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\",\r\n             \"id\": \"{{dealMemberVisibilityId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"EmployeesInvolved\",\r\n            \"id\": \"{{dealMemberInternalId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"AllEmployees\",\r\n             \"id\": \"{{restriction1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"isSyncToMarketAbuse\": {{isSyncToMarketAbuse1}},\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n\r\n            \"companyRestrictions\": [{\r\n                    \"id\": \"{{companyRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                \r\n               \r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The deal name contains updated\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.description).to.contain(\"Updated\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete an existing deal",
									"item": [
										{
											"name": "expand all",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"console.log(jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": false,\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "delete MNPI record",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"     \r",
															"\r",
															"   \r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "set MNPI props",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"categoryIdMNPI\", \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\");\r",
															"postman.setEnvironmentVariable(\"typeIdMNPI\", \"49870c48-e77b-4a64-8052-eedae585ac49\");\r",
															"postman.setEnvironmentVariable(\"EmployeesInvolved\", \"EmployeesInvolved\");\r",
															"postman.setEnvironmentVariable(\"recordTypeMNPI\", \"MNPI\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"4cfd53dc-8c1f-ec11-8408-0ebfb7f375ff\",\r\n    \"status\": \"{{dealStatus}}\",\r\n     \"recordType\": \"{{recordTypeMNPI}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"contactsUnderTent\": [],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"49870c48-e77b-4a64-8052-eedae585ac49\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"EmployeesInvolved\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"AllEmployees\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"EmployeesInvolved\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The deal name contains updated\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.recordType).to.contain(\"MNPI\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "delete a non exisiting deal",
									"item": [
										{
											"name": "Delete the new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/(12345678)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"(12345678)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "source/general requests",
							"item": [
								{
									"name": "expand all",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Test 2\r",
													"pm.test(\"Response property matches environment variable\", function () {\r",
													"  pm.expect(pm.response.json().value[0].companies[0].dataDestructionStatus).to.eql(pm.environment.get(\"dataDestructionStatus\"));\r",
													"\r",
													"});\r",
													" \r",
													"//Test 3\r",
													"pm.test(\"Response property matches environment variable\", function () {\r",
													"  pm.expect(pm.response.json().value[0].companies[0].ndaStatus).to.eql(pm.environment.get(\"ndaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"function getRandomInt(max) {\r",
													"  return Math.floor(Math.random() * max);\r",
													"}\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"var valueSize = Object.keys(jsonData.value).length\r",
													"var valueId = getRandomInt(valueSize-1);\r",
													"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
													"var companyId = getRandomInt(companySize);\r",
													"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
													"var statusId = getRandomInt(statusSize-1);\r",
													"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
													"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
													"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
													"var restrictionId = getRandomInt(restrictionSize);\r",
													"var bool = [true, false];\r",
													"var isUrgent = bool[getRandomInt(2)];\r",
													"var isDraft = bool[getRandomInt(2)];\r",
													"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
													"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
													"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
													"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
													"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
													"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
													"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
													"\r",
													"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
													"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
													"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
													"postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
													"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
													"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
													"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
													"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
													"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
													"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
													"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
													"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
													"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
													"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
													"postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
													"//postman.setEnvironmentVariable(\"businessUserIdQA\", \"e39b693c-6808-432b-806d-45c09d2cbbc0\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											],
											"query": [
												{
													"key": "$expand",
													"value": "restrictions,dealMembers,companies"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a new deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"clientId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"categoryId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"complianceStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"startDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"completionDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"isUrgent\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"lastModifiedByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"lastModifiedTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"id\",\r",
													"    \"clientId\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"categoryId\",\r",
													"    \"status\",\r",
													"    \"complianceStatus\",\r",
													"    \"startDate\",\r",
													"    \"completionDate\",\r",
													"    \"isUrgent\",\r",
													"    \"lastModifiedByUserId\",\r",
													"    \"lastModifiedTimestamp\",\r",
													"    \"createdByUserId\",\r",
													"    \"createdTimestamp\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
													"\r",
													"pm.test(\"The deal status is active\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.status).to.eq('Active');\r",
													"});\r",
													"\r",
													"pm.test(\"The compliance status is Needs Review\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.complianceStatus).to.eq('NeedsReview');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"",
													"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
													"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
													"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
													"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
													"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
													"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
													"",
													"",
													"",
													"const uuid = Math.random().toString(36).substring(2, 15) +",
													"        Math.random().toString(36).substring(2, 15);",
													"const randomEmail =  uuid + \"@emaill.com\";",
													"pm.environment.set(\"randomEmail\", randomEmail)",
													"",
													"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
													"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
													"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
													"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
													"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
													"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
													"",
													"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
													"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
													"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
													"",
													"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
													"//         pm.expect(err).to.not.be.ok;",
													"//         pm.expect(res).to.have.property('code', 200);",
													"//         pm.expect(res).to.have.property('status', 'OK');",
													"//     });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{randomCompanyName1}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        },\r\n         {\r\n            \"name\": \"{{randomCompanyName2}}\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName2}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a new deal Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"clientId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"categoryId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"complianceStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"startDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"completionDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"isUrgent\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"lastModifiedByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"lastModifiedTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"id\",\r",
													"    \"clientId\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"categoryId\",\r",
													"    \"status\",\r",
													"    \"complianceStatus\",\r",
													"    \"startDate\",\r",
													"    \"completionDate\",\r",
													"    \"isUrgent\",\r",
													"    \"lastModifiedByUserId\",\r",
													"    \"lastModifiedTimestamp\",\r",
													"    \"createdByUserId\",\r",
													"    \"createdTimestamp\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
													"\r",
													"pm.test(\"The deal status is active\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.status).to.eq('Active');\r",
													"});\r",
													"\r",
													"pm.test(\"The compliance status is Needs Review\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.complianceStatus).to.eq('NeedsReview');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"",
													"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
													"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
													"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
													"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
													"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
													"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
													"",
													"",
													"",
													"const uuid = Math.random().toString(36).substring(2, 15) +",
													"        Math.random().toString(36).substring(2, 15);",
													"const randomEmail =  uuid + \"@emaill.com\";",
													"pm.environment.set(\"randomEmail\", randomEmail)",
													"",
													"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
													"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
													"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
													"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
													"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
													"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
													"",
													"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
													"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
													"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
													"",
													"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
													"//         pm.expect(err).to.not.be.ok;",
													"//         pm.expect(res).to.have.property('code', 200);",
													"//         pm.expect(res).to.have.property('status', 'OK');",
													"//     });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{randomCompanyName1}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        },\r\n         {\r\n            \"name\": \"{{randomCompanyName2}}\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName2}}\"\r\n                    }\r\n            },\r\n            {\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }] \r\n        },\r\n         {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "На Маги заявката за 4422, да си сравня с моята ПОСТ id za qa",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"clientId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"categoryId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"complianceStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"startDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"completionDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"isUrgent\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"lastModifiedByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"lastModifiedTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"id\",\r",
													"    \"clientId\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"categoryId\",\r",
													"    \"status\",\r",
													"    \"complianceStatus\",\r",
													"    \"startDate\",\r",
													"    \"completionDate\",\r",
													"    \"isUrgent\",\r",
													"    \"lastModifiedByUserId\",\r",
													"    \"lastModifiedTimestamp\",\r",
													"    \"createdByUserId\",\r",
													"    \"createdTimestamp\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
													"\r",
													"pm.test(\"The deal status is active\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.status).to.eq('Active');\r",
													"});\r",
													"\r",
													"pm.test(\"The compliance status is Needs Review\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.complianceStatus).to.eq('NeedsReview');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"",
													"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
													"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
													"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
													"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
													"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
													"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
													"",
													"",
													"",
													"const uuid = Math.random().toString(36).substring(2, 15) +",
													"        Math.random().toString(36).substring(2, 15);",
													"const randomEmail =  uuid + \"@emaill.com\";",
													"pm.environment.set(\"randomEmail\", randomEmail)",
													"",
													"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
													"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
													"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
													"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
													"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
													"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
													"",
													"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
													"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
													"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
													"",
													"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
													"//         pm.expect(err).to.not.be.ok;",
													"//         pm.expect(res).to.have.property('code', 200);",
													"//         pm.expect(res).to.have.property('status', 'OK');",
													"//     });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n    \"name\": \"MSN Deal with Restriction\",\r\n    \"description\": \"<p>fsdfsdf</p>\",\r\n    \"categoryId\": \"0b8ef1d5-41da-eb11-aae9-0e29a95e9f25\",\r\n    \"status\": \"Active\",\r\n    \"startDate\": \"2021-08-29T21:00:00.000Z\",\r\n    \"completionDate\": null,\r\n    \"isUrgent\": false,\r\n    \"isDraft\": false,\r\n    \"companies\": [\r\n        {\r\n            \"name\": \"MSN Buyer Company\",\r\n            \"status\": \"Active\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"ndaRequestedDate\": null,\r\n            \"ndaCompletedDate\": null,\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"dataDestructionRequestedDate\": null,\r\n            \"dataDestructionCompletedDate\": null,\r\n            \"contactsUnderTent\": [],\r\n            \"companyAdvisees\": []\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"MSN Restriction\",\r\n            \"startDate\": \"2021-08-29T21:00:00.000Z\",\r\n            \"endDate\": null,\r\n            \"companyRestrictions\": [\r\n                {\r\n                    \"company\": {\r\n                        \"name\": \"MSN Buyer Company\",\r\n                        \"status\": \"Active\",\r\n                        \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\",\r\n                        \"ndaStatus\": \"NotAvailable\",\r\n                        \"ndaRequestedDate\": null,\r\n                        \"ndaCompletedDate\": null,\r\n                        \"dataDestructionStatus\": \"NotAvailable\",\r\n                        \"dataDestructionRequestedDate\": null,\r\n                        \"dataDestructionCompletedDate\": null,\r\n                        \"contactsUnderTent\": [],\r\n                        \"companyAdvisees\": []\r\n                    }\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"a243a047-2557-41d3-9a44-17ce426809eb\",\r\n                        \"memberType\": \"InternalDealLeadUser\"\r\n                    }\r\n                }\r\n            ],\r\n            \"employeeRestriction\": \"InternalDealLead, InternalDealAssociates\"\r\n        }\r\n    ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"d9999ced-bb64-43fc-b085-6ee83eb949e4\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"a243a047-2557-41d3-9a44-17ce426809eb\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"0aa31da6-6060-4fec-9a68-7f5b4ba7fdbc\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "List the new deal only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// да се проверят пропътритата от дийла\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberRestrictionId\", jsonData.value[0].restrictions[0].memberRestrictions[0].dealMemberId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals?$top=25&$filter=((id%20eq%20{{dealId}}))&$expand=dealMembers,restrictions($expand=memberRestrictions)",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											],
											"query": [
												{
													"key": "$top",
													"value": "25"
												},
												{
													"key": "$filter",
													"value": "((id%20eq%20{{dealId}}))"
												},
												{
													"key": "$expand",
													"value": "dealMembers,restrictions($expand=memberRestrictions)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update the new deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ControlRoom Deal PATCH\",\r\n    \"description\": \"The deal of a lifetime\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"Active\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the new deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "partly variables",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"randomUpdatedDealName\", _.random(1, 1000) +\" \" + \"Updated API deal\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"id\": \"{{dealId}}\",\r\n    \"clientId\": {{clientId}},\r\n    \"recordType\": \"{{recordType}}\",\r\n    \"name\": \"{{randomUpdatedDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraftAlwaysFalse}},\r\n     \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n    \"createdByUserId\": \"{{createdByUserId}}\",\r\n    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n     \"companies\": [{\r\n          \"id\": \"{{company1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n             \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"id\": \"{{contactsUnderTent1Id}}\",\r\n                \"clientId\": {{clientId}},\r\n                \"companyId\": \"{{company1Id}}\",\r\n                \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                \"createdByUserId\": \"{{createdByUserId}}\",\r\n                \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\"\r\n                \r\n            }\r\n            ]\r\n            \r\n           \r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\",\r\n             \"id\": \"{{dealMemberVisibilityId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\",\r\n            \"id\": \"{{dealMemberInternalId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n             \"id\": \"{{restriction1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"isSyncToMarketAbuse\": {{isSyncToMarketAbuse1}},\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n\r\n            \"companyRestrictions\": [{\r\n                    \"id\": \"{{companyRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"id\": \"{{memberRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"dealMemberId\": \"{{dealMemberInternalId}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                        }\r\n               \r\n            ]\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"randomUpdatedDealName\", _.random(1, 1000) +\" \" + \"Updated API deal\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"id\": \"{{dealId}}\",\r\n    \"clientId\": {{clientId}},\r\n    \"recordType\": \"{{recordType}}\",\r\n    \"name\": \"{{randomUpdatedDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraftAlwaysFalse}},\r\n     \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n    \"createdByUserId\": \"{{createdByUserId}}\",\r\n    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n     \"companies\": [{\r\n          \"id\": \"{{company1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n             \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"id\": \"{{contactsUnderTent1Id}}\",\r\n                \"clientId\": {{clientId}},\r\n                \"companyId\": \"{{company1Id}}\",\r\n                \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                \"createdByUserId\": \"{{createdByUserId}}\",\r\n                \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\"\r\n                \r\n            }\r\n            ]\r\n            \r\n           \r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\",\r\n             \"id\": \"{{dealMemberVisibilityId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\",\r\n            \"id\": \"{{dealMemberInternalId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n             \"id\": \"{{restriction1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"isSyncToMarketAbuse\": {{isSyncToMarketAbuse1}},\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n\r\n            \"companyRestrictions\": [{\r\n                    \"id\": \"{{companyRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"id\": \"{{memberRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"dealMemberId\": \"{{dealMemberInternalId}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                        }\r\n               \r\n            ]\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "working PUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"14df18b6-5962-47af-b352-08d98e2afb46\",\r\n    \"clientId\": 5395,\r\n    \"recordType\": \"Deal\",\r\n    \"name\": \"382 API deal 222\",\r\n    \"description\": \"2021-10-13T13:54:23.621Z API deal description\",\r\n    \"categoryId\": \"0d8ef1d5-41da-eb11-aae9-0e29a95e9f25\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2021-10-14T13:54:23.621Z\",\r\n    \"completionDate\": \"2021-10-15T13:54:23.621Z\",\r\n    \"isUrgent\": false,\r\n    \"isDraft\": false,\r\n    \"lastModifiedByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n    \"lastModifiedTimestamp\": \"2021-10-13T13:54:24.1611597Z\",\r\n    \"createdByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n    \"createdTimestamp\": \"2021-10-13T13:54:24.1611579Z\",\r\n    \"companies\": [\r\n        {\r\n            \"id\": \"ad2d3eb1-57ac-456b-98de-08d98e29d48e\",\r\n            \"clientId\": 5395,\r\n            \"dealId\": \"14df18b6-5962-47af-b352-08d98e2afb46\",\r\n            \"name\": \"SENTINELONE INC\",\r\n            \"externalId\": \"8183f8ae-27ee-eb11-aab2-0e552e33953f\",\r\n            \"cusip\": \"81730H109\",\r\n            \"isin\": \"US81730H1095\",\r\n            \"typeId\": \"470f046f-8b1b-4eb1-b238-cea664b18a6a\",\r\n            \"status\": \"Active\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"ndaRequestedDate\": \"2021-10-14T13:54:23.621Z\",\r\n            \"ndaCompletedDate\": \"2021-11-04T03:41:03.621Z\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"dataDestructionRequestedDate\": \"2021-10-14T13:54:23.621Z\",\r\n            \"dataDestructionCompletedDate\": \"2021-10-15T13:54:23.621Z\",\r\n            \"lastModifiedByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n            \"lastModifiedTimestamp\": \"2021-10-13T13:54:24.1611607Z\",\r\n            \"createdByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n            \"createdTimestamp\": \"2021-10-13T13:54:24.1611604Z\",\r\n            \"contactsUnderTent\": [\r\n                {\r\n                    \"id\": \"5601b7c2-706a-4d11-b1a2-08d98e2a666d\",\r\n                    \"clientId\": 5395,\r\n                    \"name\": \"50 API contact name\",\r\n                    \"title\": \"933 API contact title\",\r\n                    \"email\": \"Onie.Stehr@yahoo.com\",\r\n                    \"companyId\": \"ad2d3eb1-57ac-456b-98de-08d98e29d48e\",\r\n                    \"addedDate\": \"2021-10-15T13:54:23.621Z\",\r\n                    \"lastModifiedByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n                    \"lastModifiedTimestamp\": \"2021-10-13T13:54:24.1611623Z\",\r\n                    \"createdByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n                    \"createdTimestamp\": \"2021-10-13T13:54:24.1611618Z\"\r\n                },\r\n                {\r\n                    \"id\": \"087112ae-d884-404e-b1a3-08d98e2a666d\",\r\n                    \"clientId\": 5395,\r\n                    \"name\": \"50 API contact name\",\r\n                    \"title\": \"933 API contact title\",\r\n                    \"email\": \"Horacio_Bins39@hotmail.com\",\r\n                    \"companyId\": \"ad2d3eb1-57ac-456b-98de-08d98e29d48e\",\r\n                    \"addedDate\": \"2021-10-15T13:54:23.621Z\",\r\n                    \"lastModifiedByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n                    \"lastModifiedTimestamp\": \"2021-10-13T13:54:24.1611631Z\",\r\n                    \"createdByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n                    \"createdTimestamp\": \"2021-10-13T13:54:24.1611629Z\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n\"dealMembers\": [\r\n{\r\n            \"id\": \"3b547fdf-b20c-47f2-3fc1-08d98e2afb47\",\r\n            \"clientId\": 5395,\r\n            \"dealId\": \"14df18b6-5962-47af-b352-08d98e2afb46\",\r\n            \"memberId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n            \"memberType\": \"RecordVisibilityUser\",\r\n            \"lastModifiedByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n            \"lastModifiedTimestamp\": \"2021-10-13T13:54:24.1611637Z\",\r\n            \"createdByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n            \"createdTimestamp\": \"2021-10-13T13:54:24.1611633Z\"\r\n        },\r\n        {\r\n            \"id\": \"141b6550-0f01-421b-3fc2-08d98e2afb47\",\r\n            \"clientId\": 5395,\r\n            \"dealId\": \"14df18b6-5962-47af-b352-08d98e2afb46\",\r\n            \"memberId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n            \"memberType\": \"InternalDealLeadUser\",\r\n            \"lastModifiedByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n            \"lastModifiedTimestamp\": \"2021-10-13T13:54:24.1611641Z\",\r\n            \"createdByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n            \"createdTimestamp\": \"2021-10-13T13:54:24.161164Z\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"id\": \"dcf5d405-ee1a-4e6a-1a6c-08d98e29d493\",\r\n            \"clientId\": 5395,\r\n            \"dealId\": \"14df18b6-5962-47af-b352-08d98e2afb46\",\r\n            \"name\": \"44 API  restriction\",\r\n            \"startDate\": \"2021-10-14T13:54:23.621Z\",\r\n            \"endDate\": \"2021-10-14T13:54:23.621Z\",\r\n            \"isSyncToMarketAbuse\": false,\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"lastModifiedByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n            \"lastModifiedTimestamp\": \"2021-10-13T13:54:24.1611648Z\",\r\n            \"createdByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n            \"createdTimestamp\": \"2021-10-13T13:54:24.1611644Z\",\r\n            \"companyRestrictions\": [\r\n                {\r\n                    \"id\": \"fbbfa0cf-ecf1-48f7-60e5-08d98e29d493\",\r\n                    \"clientId\": 5395,\r\n                    \"restrictionId\": \"dcf5d405-ee1a-4e6a-1a6c-08d98e29d493\",\r\n                    \"companyId\": \"ad2d3eb1-57ac-456b-98de-08d98e29d48e\",\r\n                    \"lastModifiedByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n                    \"lastModifiedTimestamp\": \"2021-10-13T13:54:24.1611656Z\",\r\n                    \"createdByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n                    \"createdTimestamp\": \"2021-10-13T13:54:24.1611652Z\"\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"id\": \"faa90e09-33e1-4525-8458-08d98e44538f\",\r\n                    \"clientId\": 5395,\r\n                    \"restrictionId\": \"dcf5d405-ee1a-4e6a-1a6c-08d98e29d493\",\r\n                    \"dealMemberId\": \"141b6550-0f01-421b-3fc2-08d98e2afb47\",\r\n                    \"lastModifiedByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n                    \"lastModifiedTimestamp\": \"2021-10-13T13:54:24.1611662Z\",\r\n                    \"createdByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n                    \"createdTimestamp\": \"2021-10-13T13:54:24.1611659Z\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Documents",
					"item": [
						{
							"name": "getAll",
							"item": [
								{
									"name": "list all documents",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentTypeId\", jsonData.value[0].documentTypeId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"    var jsonData =pm.response.json();",
															"pm.test(\"There is a file listed\", function(){",
															"pm.expect(jsonData.value[0].fileName).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "list all documents for non existent entity",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentTypeId\", jsonData.value[0].documentTypeId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"    var jsonData =pm.response.json();",
															"pm.test(\"There is a file listed\", function(){",
															"pm.expect(jsonData.value[0].fileName).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents?$filter=EntityId eq 12328",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 12328"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "getById",
							"item": [
								{
									"name": "download a specific file",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentTypeId\", jsonData.value[0].documentTypeId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"    var jsonData =pm.response.json();",
															"pm.test(\"There is a file listed\", function(){",
															"pm.expect(jsonData.value[0].fileName).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "upload the doc to a deal Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentId\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "sample.pdf"
														},
														{
															"key": "entityId",
															"value": "{{entityId}}",
															"type": "text"
														},
														{
															"key": "documentTypeId",
															"value": "{{documentTypeId}}",
															"type": "text"
														},
														{
															"key": "entityType",
															"value": "Deal",
															"type": "text"
														},
														{
															"key": "dealId",
															"value": "6d21774f-468d-4c37-8f55-08d966d1c877",
															"type": "text",
															"disabled": true
														}
													]
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents/",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "download",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents(Id={{documentId}},EntityId={{entityId}})/download",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents(Id={{documentId}},EntityId={{entityId}})",
														"download"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "download a non existing file",
									"item": [
										{
											"name": "download",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents(Id=1234567,EntityId={{entityId}})/download",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents(Id=1234567,EntityId={{entityId}})",
														"download"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "create",
							"item": [
								{
									"name": "upload a pdf file to a deal",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create a deal for the doc to be uploaded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.id);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"recordType\": \"Deal\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "upload the doc to a deal Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentId\", jsonData.id);",
															"",
															"    var jsonData =pm.response.json();",
															"pm.test(\"There is a file listed\", function(){",
															"pm.expect(jsonData.fileName).to.exist;",
															"});",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "sample.pdf"
														},
														{
															"key": "entityId",
															"value": "{{dealId}}",
															"type": "text"
														},
														{
															"key": "documentTypeId",
															"value": "{{documentTypeId}}",
															"type": "text"
														},
														{
															"key": "entityType",
															"value": "Deal",
															"type": "text"
														},
														{
															"key": "dealId",
															"value": "6d21774f-468d-4c37-8f55-08d966d1c877",
															"type": "text",
															"disabled": true
														}
													]
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents/",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "download",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents(Id={{documentId}},EntityId={{entityId}})/download",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents(Id={{documentId}},EntityId={{entityId}})",
														"download"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "upload a file to other MNPI",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create a deal for the doc to be uploaded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.id);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Aug 20 API\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"9c71b573-0165-4cb7-9efc-85499fd17ba4\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n    \"companies\": [\r\n        {\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"5c3ed003-8791-4a64-8fa0-08d93d3eeacc\"\r\n        }\r\n    ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"980d61d4-7833-4161-9646-1e40063440d9\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },{\r\n            \"memberId\": \"e39b693c-6808-432b-806d-45c09d2cbbc0\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"ee3034ba-eccc-44f5-bdb4-93eaf6679944\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        },{\r\n            \"memberId\": \"4052cf56-12e8-42c5-b666-e309fd6ac6b4\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"0f690963-7bc4-4e14-a3a1-09cb193df041\",\r\n            \"memberType\": \"InternalDealAssociateGroup\"\r\n        },{\r\n            \"memberId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n            \"memberType\": \"SpecificInternalUser\"\r\n        },{\r\n            \"memberId\": \"0f690963-7bc4-4e14-a3a1-09cb193df041\",\r\n            \"memberType\": \"AssociatedComplianceTeamGroup\"\r\n        },{\r\n            \"memberId\": \"4052cf56-12e8-42c5-b666-e309fd6ac6b4\",\r\n            \"memberType\": \"InternalDealAssociateUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead, InternalDealAssociates, AssociatedComplianceTeam, AllEmployees\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "upload the doc to other MNPI",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentId\", jsonData.id);",
															"",
															"    var jsonData =pm.response.json();",
															"pm.test(\"There is a file listed\", function(){",
															"pm.expect(jsonData.entityType).to.exist;",
															"});",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "sample.pdf"
														},
														{
															"key": "entityId",
															"value": "{{dealId}}",
															"type": "text"
														},
														{
															"key": "documentTypeId",
															"value": "{{documentTypeId}}",
															"type": "text"
														},
														{
															"key": "entityType",
															"value": "other MNPI",
															"type": "text"
														},
														{
															"key": "dealId",
															"value": "6d21774f-468d-4c37-8f55-08d966d1c877",
															"type": "text",
															"disabled": true
														}
													]
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents/",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "download",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents(Id={{documentId}},EntityId={{entityId}})/download",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents(Id={{documentId}},EntityId={{entityId}})",
														"download"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "upload no file",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentTypeId\", jsonData.value[0].documentTypeId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"    var jsonData =pm.response.json();",
															"pm.test(\"There is a file listed\", function(){",
															"pm.expect(jsonData.value[0].fileName).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "upload the doc to a deal Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentId\", jsonData.id);",
															"",
															" ",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														},
														{
															"key": "entityId",
															"value": "{{entityId}}",
															"type": "text"
														},
														{
															"key": "documentTypeId",
															"value": "{{documentTypeId}}",
															"type": "text"
														},
														{
															"key": "entityType",
															"value": "Deal",
															"type": "text"
														},
														{
															"key": "dealId",
															"value": "6d21774f-468d-4c37-8f55-08d966d1c877",
															"type": "text",
															"disabled": true
														}
													]
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents/",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents",
														""
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "upload a file over 100mb",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentId\", jsonData.id);",
															"",
															"pm.test(\"File too big\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "529-Article Text-2712-1-10-20130506.pdf"
														},
														{
															"key": "entityId",
															"value": "{{entityId}}",
															"type": "text"
														},
														{
															"key": "documentTypeId",
															"value": "{{documentTypeId}}",
															"type": "text"
														},
														{
															"key": "entityType",
															"value": "Deal",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents/",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents",
														""
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "update",
							"item": [
								{
									"name": "update the file with another document type",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentTypeId\", jsonData.value[0].documentTypeId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"    var jsonData =pm.response.json();",
															"pm.test(\"There is a file listed\", function(){",
															"pm.expect(jsonData.value[0].fileName).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "upload the doc to a deal Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentId\", jsonData.id);",
															"",
															"    var jsonData =pm.response.json();",
															"pm.test(\"There is a file listed\", function(){",
															"pm.expect(jsonData.fileName).to.exist;",
															"});",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "sample.pdf"
														},
														{
															"key": "entityId",
															"value": "{{entityId}}",
															"type": "text"
														},
														{
															"key": "documentTypeId",
															"value": "{{documentTypeId}}",
															"type": "text"
														},
														{
															"key": "entityType",
															"value": "Deal",
															"type": "text"
														},
														{
															"key": "dealId",
															"value": "6d21774f-468d-4c37-8f55-08d966d1c877",
															"type": "text",
															"disabled": true
														}
													]
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents/",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"documentTypeId\": \"{{documentTypeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents(Id={{documentId}},EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents(Id={{documentId}},EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update non exisitng file",
									"item": [
										{
											"name": "update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"documentTypeId\": \"{{documentTypeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents(Id=12345,EntityId=3456789)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents(Id=12345,EntityId=3456789)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete existing file",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentTypeId\", jsonData.value[0].documentTypeId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"    var jsonData =pm.response.json();",
															"pm.test(\"There is a file listed\", function(){",
															"pm.expect(jsonData.value[0].fileName).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "upload the doc to a deal Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"documentId\", jsonData.id);",
															"",
															"    var jsonData =pm.response.json();",
															"pm.test(\"There is a file listed\", function(){",
															"pm.expect(jsonData.fileName).to.exist;",
															"});",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "sample.pdf"
														},
														{
															"key": "entityId",
															"value": "{{entityId}}",
															"type": "text"
														},
														{
															"key": "documentTypeId",
															"value": "{{documentTypeId}}",
															"type": "text"
														},
														{
															"key": "entityType",
															"value": "Deal",
															"type": "text"
														},
														{
															"key": "dealId",
															"value": "6d21774f-468d-4c37-8f55-08d966d1c877",
															"type": "text",
															"disabled": true
														}
													]
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents/",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents(Id={{documentId}},EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents(Id={{documentId}},EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "delete non existing file",
									"item": [
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/documents(Id=34567,EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"documents(Id=34567,EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Comments",
					"item": [
						{
							"name": "getAll",
							"item": [
								{
									"name": "list all comments for specific deal",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"visibility\", jsonData.value[0].visibility);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															" var jsonData =pm.response.json();",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.value[0].text).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "list all comments without specifing deal",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"visibility\", jsonData.value[0].visibility);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "getById",
							"item": [
								{
									"name": "get specific comment",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"visibility\", jsonData.value[0].visibility);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"commentId\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityType\": \"Deal\",\r\n  \"visibility\": \"Private\",\r\n  \"entityId\": \"{{entityId}}\",\r\n  \"text\" : \"im here just to check the comments\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															" var jsonData =pm.response.json();",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.value[0].text).to.exist;",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments(Id={{commentId}},EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments(Id={{commentId}},EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "get non existing comment",
									"item": [
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments(Id=12345678,EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments(Id=12345678,EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "create",
							"item": [
								{
									"name": "create public comment",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var responseJson = JSON.parse(responseBody);",
															"var a=[];",
															"var list = (responseJson.value).length;",
															"for (var i = 0; i < list; i++) ",
															"                  {",
															"                   var counter = responseJson.value[i];",
															"                    if (counter.isin !== null){",
															"                        a.push(counter)",
															"                    }",
															"                    ",
															"                   }",
															"",
															" for(var i =0;  i < a.length; i++){",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)",
															"if (companyWithIsin && companyWithIsin.name) {",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");",
															"return;",
															"}",
															"     console.log(companyWithIsin)",
															"         ",
															"         ",
															"        ",
															"         console.log(a[i])",
															"    }",
															"  ",
															"",
															"",
															"function getRandomInt(max) {",
															"  return Math.floor(Math.random() * max);",
															"}",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"var valueSize = Object.keys(jsonData.value).length",
															"var valueId = getRandomInt(valueSize-1);",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length",
															"var companyId = getRandomInt(companySize);",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length",
															"var statusId = getRandomInt(statusSize-1);",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length",
															"var restrictionId = getRandomInt(restrictionSize);",
															"var bool = [true, false];",
															"var isUrgent = bool[getRandomInt(2)];",
															"var isDraft = bool[getRandomInt(2)];",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;",
															"var dealMembersId = getRandomInt(dealMembersSize-1);",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]",
															"",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);",
															"postman.setEnvironmentVariable(\"typeId\",",
															"     jsonData.value[valueId].companies[companyId]",
															"     ? jsonData.value[valueId].companies[companyId].typeId ",
															"     : null);",
															"",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");",
															"",
															"",
															"postman.setEnvironmentVariable(\"employeeRestriction\",",
															"     jsonData.value[valueId].restrictions[restrictionId] ",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction ",
															"     : null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"recordType\": \"Deal\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"commentId\", jsonData.id);",
															"",
															" var jsonData =pm.response.json();",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.text).to.exist;",
															"});",
															"",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.visibility).to.eq(\"Public\");",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityType\": \"Deal\",\r\n  \"visibility\": \"Public\",\r\n  \"entityId\": \"{{dealId}}\",\r\n  \"text\" : \"im here just to check the comments\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															" var jsonData =pm.response.json();",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.value[0].text).to.exist;",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments(Id={{commentId}},EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments(Id={{commentId}},EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create private comment",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var responseJson = JSON.parse(responseBody);",
															"var a=[];",
															"var list = (responseJson.value).length;",
															"for (var i = 0; i < list; i++) ",
															"                  {",
															"                   var counter = responseJson.value[i];",
															"                    if (counter.isin !== null){",
															"                        a.push(counter)",
															"                    }",
															"                    ",
															"                   }",
															"",
															" for(var i =0;  i < a.length; i++){",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)",
															"if (companyWithIsin && companyWithIsin.name) {",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");",
															"return;",
															"}",
															"     console.log(companyWithIsin)",
															"         ",
															"         ",
															"        ",
															"         console.log(a[i])",
															"    }",
															"  ",
															"",
															"",
															"function getRandomInt(max) {",
															"  return Math.floor(Math.random() * max);",
															"}",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"var valueSize = Object.keys(jsonData.value).length",
															"var valueId = getRandomInt(valueSize-1);",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length",
															"var companyId = getRandomInt(companySize);",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length",
															"var statusId = getRandomInt(statusSize-1);",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length",
															"var restrictionId = getRandomInt(restrictionSize);",
															"var bool = [true, false];",
															"var isUrgent = bool[getRandomInt(2)];",
															"var isDraft = bool[getRandomInt(2)];",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;",
															"var dealMembersId = getRandomInt(dealMembersSize-1);",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]",
															"",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);",
															"postman.setEnvironmentVariable(\"typeId\",",
															"     jsonData.value[valueId].companies[companyId]",
															"     ? jsonData.value[valueId].companies[companyId].typeId ",
															"     : null);",
															"",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");",
															"",
															"",
															"postman.setEnvironmentVariable(\"employeeRestriction\",",
															"     jsonData.value[valueId].restrictions[restrictionId] ",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction ",
															"     : null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"recordType\": \"Deal\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"externalIdentifierType\": \"SecMasterSecurityId\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"commentId\", jsonData.id);",
															"",
															" var jsonData =pm.response.json();",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.text).to.exist;",
															"});",
															"",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.visibility).to.eq(\"Public\");",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityType\": \"Deal\",\r\n  \"visibility\": \"Private\",\r\n  \"entityId\": \"{{dealId}}\",\r\n  \"text\" : \"im here just to check the comments\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															" var jsonData =pm.response.json();",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.value[0].text).to.exist;",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments(Id={{commentId}},EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments(Id={{commentId}},EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "send empty comment",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityType\": \"Deal\",\r\n  \"visibility\": \"Private\",\r\n  \"entityId\": \"{{dealId}}\",\r\n  \"text\" : \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "update",
							"item": [
								{
									"name": "change comments text",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"visibility\", jsonData.value[0].visibility);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"commentId\", jsonData.id);",
															"",
															" var jsonData =pm.response.json();",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.text).to.exist;",
															"});",
															"",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.visibility).to.eq(\"Public\");",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityType\": \"Deal\",\r\n  \"visibility\": \"Public\",\r\n  \"entityId\": \"{{entityId}}\",\r\n  \"text\" : \"im here just to check the comments\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"visibility\": \"Public\",\r\n  \"text\" : \"wowww did you just comment thatt?\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments(Id={{commentId}},EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments(Id={{commentId}},EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "make comment private",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"visibility\", jsonData.value[0].visibility);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"commentId\", jsonData.id);",
															"",
															" var jsonData =pm.response.json();",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.text).to.exist;",
															"});",
															"",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.visibility).to.eq(\"Public\");",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityType\": \"Deal\",\r\n  \"visibility\": \"Public\",\r\n  \"entityId\": \"{{entityId}}\",\r\n  \"text\" : \"im here just to check the comments\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"visibility\": \"Private\",\r\n  \"text\" : \"wowww did you just comment thatt?\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments(Id={{commentId}},EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments(Id={{commentId}},EntityId={{entityId}})"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.test(\"The comment is private\", function(){",
															"pm.expect(jsonData.value[0].visibility).to.eq(\"Private\");",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments(Id={{commentId}},EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments(Id={{commentId}},EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "make comment public",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"visibility\", jsonData.value[0].visibility);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"commentId\", jsonData.id);",
															"",
															" var jsonData =pm.response.json();",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.text).to.exist;",
															"});",
															"",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.visibility).to.eq(\"Public\");",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityType\": \"Deal\",\r\n  \"visibility\": \"Private\",\r\n  \"entityId\": \"{{entityId}}\",\r\n  \"text\" : \"im here just to check the comments\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"visibility\": \"Public\",\r\n  \"text\" : \"wowww did you just comment thatt?\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments(Id={{commentId}},EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments(Id={{commentId}},EntityId={{entityId}})"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.test(\"The comment is public\", function(){",
															"pm.expect(jsonData.value[0].visibility).to.eq(\"Public\");",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments(Id={{commentId}},EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments(Id={{commentId}},EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update the comment without text",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"visibility\", jsonData.value[0].visibility);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"commentId\", jsonData.id);",
															"",
															" var jsonData =pm.response.json();",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.text).to.exist;",
															"});",
															"",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.visibility).to.eq(\"Public\");",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityType\": \"Deal\",\r\n  \"visibility\": \"Private\",\r\n  \"entityId\": \"{{entityId}}\",\r\n  \"text\" : \"im here just to check the comments\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"visibility\": \"Public\",\r\n  \"text\" : \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments(Id={{commentId}},EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments(Id={{commentId}},EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete existing comment",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"visibility\", jsonData.value[0].visibility);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													],
													"query": [
														{
															"key": "$filter",
															"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"commentId\", jsonData.id);",
															"",
															" var jsonData =pm.response.json();",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.text).to.exist;",
															"});",
															"",
															"pm.test(\"There is at least one comment\", function(){",
															"pm.expect(jsonData.visibility).to.eq(\"Public\");",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityType\": \"Deal\",\r\n  \"visibility\": \"Public\",\r\n  \"entityId\": \"{{entityId}}\",\r\n  \"text\" : \"im here just to check the comments\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments(Id={{commentId}},EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments(Id={{commentId}},EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "delete non existing comment",
									"item": [
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/comments(Id=2345678,EntityId={{entityId}})",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"comments(Id=2345678,EntityId={{entityId}})"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Document Types",
					"item": [
						{
							"name": "getAll",
							"item": [
								{
									"name": "check if the doc types  have ID",
									"item": [
										{
											"name": "List all document types",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"\r",
															"\r",
															"pm.test(\"The document type has an ID\", function () {\r",
															"  pm.expect(pm.response.json().value[0].id).to.exist\r",
															"});\r",
															"pm.test(\"The document type has an ID\", function () {\r",
															"  pm.expect(pm.response.json().value[1].id).to.exist\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "check if there are more than one doc type",
									"item": [
										{
											"name": "List all doc types",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"\r",
															"postman.setEnvironmentVariable(\"documentName\", jsonData.value[valueId].name);\r",
															"\r",
															"pm.test(\"Response property matches environment variable\", function () {\r",
															"  pm.expect(pm.response.json().value[valueId].name).to.eql(pm.environment.get(\"documentName\"));\r",
															"});\r",
															"\r",
															"pm.test(\"There is more than one doc type\", function () {\r",
															"  pm.expect(pm.response.json().value[0].id).to.exist\r",
															"});\r",
															"pm.test(\"There is more than one doc type\", function () {\r",
															"  pm.expect(pm.response.json().value[1].id).to.exist\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "getById",
							"item": [
								{
									"name": "list the newly created doc type",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"id\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"clientId\": {\r",
															"      \"type\": \"integer\"\r",
															"    },\r",
															"    \"name\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"description\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"categoryId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"complianceStatus\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"startDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"completionDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"isUrgent\": {\r",
															"      \"type\": \"boolean\"\r",
															"    },\r",
															"    \"lastModifiedByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"lastModifiedTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"id\",\r",
															"    \"clientId\",\r",
															"    \"name\",\r",
															"    \"description\",\r",
															"    \"categoryId\",\r",
															"    \"status\",\r",
															"    \"complianceStatus\",\r",
															"    \"startDate\",\r",
															"    \"completionDate\",\r",
															"    \"isUrgent\",\r",
															"    \"lastModifiedByUserId\",\r",
															"    \"lastModifiedTimestamp\",\r",
															"    \"createdByUserId\",\r",
															"    \"createdTimestamp\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Creation date is today\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    var currTime = new Date();\r",
															"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
															"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
															"    var yyyy = currTime.getFullYear();\r",
															"    var hh = currTime.getHours() - 3;\r",
															"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
															"\r",
															"    var cretedTimestamp = jsonData.createdTimestamp;\r",
															"    \r",
															"    pm.expect(cretedTimestamp).to.include(currTime);\r",
															"})\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"documentTypeId\", jsonData.id);\r",
															"\r",
															"pm.test(\"The is a custom document type\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.isSystem).to.eq(false);\r",
															"});\r",
															"\r",
															"pm.test(\"The deal status is Active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Active');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"There is contact under the tent name in the response\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.createdByUserId).to.exist;\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"API Active Document type \",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"The doc type ID from the creation matched the listed one\", function () {\r",
															"  pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"documentTypeId\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/{{documentTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"{{documentTypeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "list the non existent doc type",
									"item": [
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/(12345678)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"(12345678)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "create",
							"item": [
								{
									"name": "create a custom document type",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"documentTypeId\", jsonData.id);\r",
															"\r",
															"pm.test(\"The is a custom document type\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.isSystem).to.eq(false);\r",
															"});\r",
															"\r",
															"pm.test(\"The deal status is Active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Active');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"There is contact under the tent name in the response\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.createdByUserId).to.exist;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"API Active Document type \",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a default document type",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"API Active Document type \",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create active document type",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"The deal status is Active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Active');\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"API Active Document  \",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create inactive document type",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"The deal status is not active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Inactive');\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"API Active Document type \",\r\n    \"status\": \"Inactive\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create document type without status",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Active');\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"API Active Document type \",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create document type with no name",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \r\n    \"status\": \"Inactive\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete custom document type",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"API Active Document type \",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/{{documentTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"{{documentTypeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/{{documentTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"{{documentTypeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "delete default document type",
									"item": [
										{
											"name": "list the default categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = JSON.parse(responseBody);\r",
															"\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isSystem === true){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															"\r",
															" \r",
															" for(var i =0;  i < a.length; i++){\r",
															"        \r",
															"         postman.setEnvironmentVariable(\"defaultType\", a[i].id);\r",
															"         console.log(a[i])\r",
															"    }"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/{{defaultType}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"{{defaultType}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "delete non existing document type",
									"item": [
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/(123456)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"(123456)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "patch",
							"item": [
								{
									"name": "deactivate a document type",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"documentTypeId\", jsonData.id);\r",
															"\r",
															"pm.test(\"The deal status is Active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Active');\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"API Active Document 1oct \",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"CompanyType Patched\",\r\n    \"status\": \"Inactive\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/{{documentTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"{{documentTypeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The status isnt active\", function () {\r",
															"  pm.expect(pm.response.json().status).to.eql('Inactive');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/{{documentTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"{{documentTypeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "activate a document type",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"documentTypeId\", jsonData.id);\r",
															"\r",
															"pm.test(\"The deal status is Active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Active');\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"API Active Document 1oct \",\r\n    \"status\": \"Inactive\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"CompanyType Patched\",\r\n    \"status\": \"Active\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/{{documentTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"{{documentTypeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The status is active\", function () {\r",
															"  pm.expect(pm.response.json().status).to.eql('Active');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/{{documentTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"{{documentTypeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update default document type",
									"item": [
										{
											"name": "List all deal categories Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isSystem === true){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															"\r",
															" \r",
															" for(var i =0;  i < a.length; i++){\r",
															"        \r",
															"         postman.setEnvironmentVariable(\"defaultDocType\", a[i].id);\r",
															"         console.log(a[i])\r",
															"    }\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 400\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(400);\r",
															"    }\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"patched\",\r\n    \"status\": \"Active\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/{{defaultDocType}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"{{defaultDocType}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The status is active\", function () {\r",
															"  pm.expect(pm.response.json().status).to.eql('Active');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/{{defaultDocType}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"{{defaultDocType}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update non existent document type",
									"item": [
										{
											"name": "patch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"CompanyType Patched\",\r\n    \"status\": \"Active\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/(12345)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"(12345)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update document types name only",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"documentTypeId\", jsonData.id);\r",
															"\r",
															"pm.test(\"The deal status is Active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Active');\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"API Active Document 1oct \",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"CompanyType Patched\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/{{documentTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"{{documentTypeId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The status is active\", function () {\r",
															"  pm.expect(pm.response.json().name).to.eql('CompanyType Patched');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/document-types/{{documentTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"document-types",
														"{{documentTypeId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Deal Categories",
					"item": [
						{
							"name": "getAll",
							"item": [
								{
									"name": "check if the deal category has ID",
									"item": [
										{
											"name": "List all deal categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].id);\r",
															"\r",
															"pm.test(\"Response property matches environment variable\", function () {\r",
															"  pm.expect(pm.response.json().value[valueId].id).to.eql(pm.environment.get(\"categoryId\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "check if the deal categories have clientIds",
									"item": [
										{
											"name": "List all deal categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"\r",
															"postman.setEnvironmentVariable(\"categoryName\", jsonData.value[valueId].name);\r",
															"\r",
															"pm.test(\"Response property matches environment variable\", function () {\r",
															"  pm.expect(pm.response.json().value[valueId].name).to.eql(pm.environment.get(\"categoryName\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "getById",
							"item": [
								{
									"name": "list the newly created deal category",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"name\": \"API deal\"\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "list the newly created deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Creation date is today\", function(){",
															"    var jsonData = pm.response.json();",
															"",
															"    var currTime = new Date();",
															"    var dd = String(currTime.getDate()).padStart(2, '0');",
															"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');",
															"    var yyyy = currTime.getFullYear();",
															"    var hh = currTime.getHours() - 3;",
															"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";",
															"",
															"    var cretedTimestamp = jsonData.createdTimestamp;",
															"    ",
															"    pm.expect(cretedTimestamp).to.include(currTime);",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "list non existing deal category Copy",
									"item": [
										{
											"name": "list the newly created deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/(999999999)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"(999999999)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "create",
							"item": [
								{
									"name": "create deal category with name only",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"postman.setEnvironmentVariable(\"categoryName\", jsonData.name);",
															"console.log(jsonData.name)",
															"",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"name\": \"API deal\"\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "list the new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"",
															"// Test 1",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Test 2",
															"pm.test(\"Response property matches environment variable\", function () {",
															"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"categoryName\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create deal category with inactive status",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"postman.setEnvironmentVariable(\"categoryStatus\", jsonData.status);",
															"console.log(jsonData.status)",
															"",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"name\": \"Inactive deal\",\n            \"status\": \"Inactive\"\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "list the new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Response property matches environment variable\", function () {",
															"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"categoryStatus\"));",
															"});",
															"",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create default deal category",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"name\": \"API deal\",\n            \"isSystem\": true\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "(N) create deal category with empty name",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"name\": \"\"\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "(N) create deal category with status only",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"status\": \"Active\"\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "(N) business users create deal category",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"status\": \"Active\"\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{businessUserToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "(N) compliance users create deal category Copy",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"status\": \"Active\"\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete existing deal category",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"name\": \"API deal\"\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check if the category is delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "(N)delete default deal category",
									"item": [
										{
											"name": "list default categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var responseJson = JSON.parse(responseBody);",
															"",
															"var a=[];",
															"var list = (responseJson.value).length;",
															"for (var i = 0; i < list; i++) ",
															"                  {",
															"                   var counter = responseJson.value[i];",
															"                    if (counter.isSystem === true){",
															"                        a.push(counter)",
															"                    }",
															"                    ",
															"                   }",
															"",
															"",
															" ",
															" for(var i =0;  i < a.length; i++){",
															"        ",
															"         postman.setEnvironmentVariable(\"defaultCat\", a[i].id);",
															"         console.log(a[i])",
															"    }",
															"  ",
															"// var dealCategoryDefault = jsonData.value[0].find(function(dealCategoryDefault) {",
															"//     return dealCategoryDefault.isSystem === true;",
															"  ",
															"// });",
															"",
															"//pm.environment.set(\"dealCategoryDefault\", dealCategoryDefault.isSystem);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{defaultCat}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{defaultCat}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "(N) delete  non existing deal category",
									"item": [
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/(999999)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"(999999)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "patch",
							"item": [
								{
									"name": "update existing deal category",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"name\": \"api deal category\"\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update existing deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"API patched\",\n    \"status\": \"Inactive\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "list the new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"categoryName\", jsonData.name);",
															"console.log(jsonData.name)",
															"",
															"pm.test(\"Response property matches environment variable\", function () {",
															"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"categoryName\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "deactivate a deal category",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"name\": \"api deal category\"\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "update the deal category status only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \n    \"status\": \"Inactive\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "list the new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "activate a deal category Copy",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"name\": \"api deal category\",\n            \"status\": \"Inactive\"\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "update the deal category status only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \n    \"status\": \"Active\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "list the new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update the deal category name only",
									"item": [
										{
											"name": "create deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"dealCategoryId\", jsonData.id);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\n            \n            \"name\": \"api deal category\"\n        }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "update the deal category status only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \n    \"name\": \"Updated\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "list the new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{dealCategoryId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{dealCategoryId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "(N) update non existing deal category",
									"item": [
										{
											"name": "Update existing deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"API patched\",\n    \"status\": \"Inactive\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/(99999999)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"(99999999)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "(N) update default deal category",
									"item": [
										{
											"name": "List all deal categories Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isSystem === true){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															"\r",
															" \r",
															" for(var i =0;  i < a.length; i++){\r",
															"        \r",
															"         postman.setEnvironmentVariable(\"defaultDealCat\", a[i].id);\r",
															"         console.log(a[i])\r",
															"    }"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update existing deal category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"patched\",\n    \"status\": \"Inactive\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deal-categories/{{defaultDealCat}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deal-categories",
														"{{defaultDealCat}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "extend the deals for deal categories",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-categories?$expand=Deals",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-categories"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Deals"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CompanyType",
					"item": [
						{
							"name": "getById",
							"item": [
								{
									"name": "list the newly created company type",
									"item": [
										{
											"name": "Create a custom company type Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"companyTypeId\", jsonData.id);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"ControlRoom CompanyType API \",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "List specific doc type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types/{{companyTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types",
														"{{companyTypeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "list non existing company type",
									"item": [
										{
											"name": "List specific company type Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types/(123456789)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types",
														"(123456789)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "getAll",
							"item": [
								{
									"name": "check if the doc type has an ID",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"docId\", jsonData.value[0].id);",
															"",
															"pm.test(\"Response property matches environment variable\", function () {",
															"  pm.expect(pm.response.json().value[0].id).to.eql(pm.environment.get(\"docId\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "create",
							"item": [
								{
									"name": "create active company type",
									"item": [
										{
											"name": "Create active company type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"companyTypeId\", jsonData.id);\r",
															"\r",
															"pm.test(\"The status is Active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Active');\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create inactive company type",
									"item": [
										{
											"name": "Create active company type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"companyTypeId\", jsonData.id);\r",
															"\r",
															"pm.test(\"The status is active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('active');\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Inactive\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create default company type",
									"item": [
										{
											"name": "Create company type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create custom company type",
									"item": [
										{
											"name": "Create a custom company type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"companyTypeId\", jsonData.id);\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"The type is not System\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.isSystem).to.eq('False');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create company type without name",
									"item": [
										{
											"name": "Create a custom company type Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "BU creates company type",
									"item": [
										{
											"name": "BU create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{businessUserToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CU creates company type",
									"item": [
										{
											"name": "CU create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{complianceUserToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete custom company type",
									"item": [
										{
											"name": "Create active custom company type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"companyTypeId\", jsonData.id);\r",
															"\r",
															"pm.test(\"The status is active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('active');\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types/{{companyTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types",
														"{{companyTypeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "delete default company type",
									"item": [
										{
											"name": "list the default categories Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = JSON.parse(responseBody);\r",
															"\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isSystem === true){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															"\r",
															" \r",
															" for(var i =0;  i < a.length; i++){\r",
															"        \r",
															"         postman.setEnvironmentVariable(\"defaultType\", a[i].id);\r",
															"         console.log(a[i])\r",
															"    }"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 403 or 404\", function () {\r",
															"    if (pm.response.code == 403) {\r",
															"        pm.response.to.have.status(403);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types/{{defaultType}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types",
														"{{defaultType}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "delete non existent company type",
									"item": [
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 403 or 404\", function () {\r",
															"    if (pm.response.code == 403) {\r",
															"        pm.response.to.have.status(403);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types/(123456789)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types",
														"(123456789)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "patch",
							"item": [
								{
									"name": "Activate inactive company type",
									"item": [
										{
											"name": "Create a custom company type Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"id\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"clientId\": {\r",
															"      \"type\": \"integer\"\r",
															"    },\r",
															"    \"name\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"description\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"categoryId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"complianceStatus\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"startDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"completionDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"isUrgent\": {\r",
															"      \"type\": \"boolean\"\r",
															"    },\r",
															"    \"lastModifiedByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"lastModifiedTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"id\",\r",
															"    \"clientId\",\r",
															"    \"name\",\r",
															"    \"description\",\r",
															"    \"categoryId\",\r",
															"    \"status\",\r",
															"    \"complianceStatus\",\r",
															"    \"startDate\",\r",
															"    \"completionDate\",\r",
															"    \"isUrgent\",\r",
															"    \"lastModifiedByUserId\",\r",
															"    \"lastModifiedTimestamp\",\r",
															"    \"createdByUserId\",\r",
															"    \"createdTimestamp\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Creation date is today\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    var currTime = new Date();\r",
															"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
															"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
															"    var yyyy = currTime.getFullYear();\r",
															"    var hh = currTime.getHours() - 3;\r",
															"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
															"\r",
															"    var cretedTimestamp = jsonData.createdTimestamp;\r",
															"    \r",
															"    pm.expect(cretedTimestamp).to.include(currTime);\r",
															"})\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"companyTypeId\", jsonData.id);\r",
															"\r",
															"pm.test(\"The status is Active\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Active');\r",
															"});\r",
															"\r",
															"pm.test(\"The type is not System\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.isSystem).to.eq('False');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Inactive\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update custom company type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"The status is inactive\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Inactive');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Deactivated Patched\",\r\n    \"status\": \"Active\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types/{{companyTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types",
														"{{companyTypeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Deactivate active company type",
									"item": [
										{
											"name": "Create a custom company type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"ControlRoom CompanyType\",\r\n    \"status\": \"Inactive\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update custom company type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"The status is inactive\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.status).to.eq('Inactive');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Deactivated Patched\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types/{{companyTypeId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types",
														"{{companyTypeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update non existent company types",
									"item": [
										{
											"name": "Update custom company type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400 or 404\", function () {\r",
															"    if (pm.response.code == 400) {\r",
															"        pm.response.to.have.status(400);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Deactivated Patched\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types/(1234567)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types",
														"(1234567)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update default company type",
									"item": [
										{
											"name": "List all default company types",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isSystem === true){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															"\r",
															" \r",
															" for(var i =0;  i < a.length; i++){\r",
															"        \r",
															"         postman.setEnvironmentVariable(\"defaultCompanyType\", a[i].id);\r",
															"         console.log(a[i])\r",
															"    }\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update custom company type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 400) {\r",
															"        pm.response.to.have.status(400);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Deactivated Patched\",\r\n    \"status\": \"Active\",\r\n    \"isSystem\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/company-types/{{defaultCompanyType}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"company-types",
														"{{defaultCompanyType}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "List all company types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"value\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"value\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var json= pm.response.json()\r",
											"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/company-types",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"company-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "extend the companies for company types",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/company-types?$expand=Companies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"company-types"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Companies"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Security search",
					"item": [
						{
							"name": "get",
							"item": [
								{
									"name": "search Admin",
									"item": [
										{
											"name": "security search",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/security-master/search?term=nest&top=5&isFullSearch=true",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"security-master",
														"search"
													],
													"query": [
														{
															"key": "term",
															"value": "nest"
														},
														{
															"key": "top",
															"value": "5"
														},
														{
															"key": "isFullSearch",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "security search supplemental fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/security-master/search?term=googl&top=5&isFullSearch=false&supplementalFields=cu Si p, ISI n, sYMBol",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"security-master",
														"search"
													],
													"query": [
														{
															"key": "term",
															"value": "googl"
														},
														{
															"key": "top",
															"value": "5"
														},
														{
															"key": "isFullSearch",
															"value": "false"
														},
														{
															"key": "supplementalFields",
															"value": "cu Si p, ISI n, sYMBol"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "lookup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/security-master/lookup?lookUpType=SecMasterSecurityId&lookUpValue=c0e9c89a-5502-eb11-8140-000c29887906",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"security-master",
														"lookup"
													],
													"query": [
														{
															"key": "lookUpType",
															"value": "SecMasterSecurityId"
														},
														{
															"key": "lookUpValue",
															"value": "c0e9c89a-5502-eb11-8140-000c29887906"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "search Compliance",
									"item": [
										{
											"name": "security search",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/security-master/search?term=nest&top=5&isFullSearch=true",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"security-master",
														"search"
													],
													"query": [
														{
															"key": "term",
															"value": "nest"
														},
														{
															"key": "top",
															"value": "5"
														},
														{
															"key": "isFullSearch",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "lookup",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/security-master/search?term=nest&top=5&isFullSearch=true",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"security-master",
														"search"
													],
													"query": [
														{
															"key": "term",
															"value": "nest"
														},
														{
															"key": "top",
															"value": "5"
														},
														{
															"key": "isFullSearch",
															"value": "true"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{complianceUserToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "search Business",
									"item": [
										{
											"name": "security search",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/security-master/search?term=nest&top=5&isFullSearch=true",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"security-master",
														"search"
													],
													"query": [
														{
															"key": "term",
															"value": "nest"
														},
														{
															"key": "top",
															"value": "5"
														},
														{
															"key": "isFullSearch",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "lookup",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/security-master/search?term=nest&top=5&isFullSearch=true",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"security-master",
														"search"
													],
													"query": [
														{
															"key": "term",
															"value": "nest"
														},
														{
															"key": "top",
															"value": "5"
														},
														{
															"key": "isFullSearch",
															"value": "true"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{businessUserToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Roles",
					"item": [
						{
							"name": "getAll",
							"item": [
								{
									"name": "Get all roles info",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Success\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"  postman.setEnvironmentVariable(\"adminUserRoleId\", jsonData.value[0].id);\r",
													"\r",
													"\r",
													"pm.test(\"The 1st role name is Admin\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.value[0].name).to.eq('Admin');\r",
													"});\r",
													"\r",
													" \r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/roles",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"roles"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Webhook Integration",
					"item": [
						{
							"name": "getAll",
							"item": [
								{
									"name": "event log",
									"item": [
										{
											"name": "get event log",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations(36E8AB2D-F44D-EC11-AB22-0EAFC1B4DB39)/event-log?$expand=event",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations(36E8AB2D-F44D-EC11-AB22-0EAFC1B4DB39)",
														"event-log"
													],
													"query": [
														{
															"key": "$expand",
															"value": "event"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get event log",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/{{webhookSubsId}}/event-log?$expand=event",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"{{webhookSubsId}}",
														"event-log"
													],
													"query": [
														{
															"key": "$expand",
															"value": "event"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "getAll",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"value\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"value\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var json= pm.response.json()\r",
													"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
													"\r",
													"})\r",
													"\r",
													"var jsonData= pm.response.json()\r",
													"postman.setEnvironmentVariable(\"webhookSubsId\", jsonData.value[0].webhooks[0].id)\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/webhook-integrations?$expand=webhooks,IntegrationRestrictionLists",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"webhook-integrations"
											],
											"query": [
												{
													"key": "$expand",
													"value": "webhooks,IntegrationRestrictionLists"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "getByID",
							"item": [
								{
									"name": "get existing",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"id\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"clientId\": {\r",
															"      \"type\": \"integer\"\r",
															"    },\r",
															"    \"name\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"description\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"categoryId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"complianceStatus\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"startDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"completionDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"isUrgent\": {\r",
															"      \"type\": \"boolean\"\r",
															"    },\r",
															"    \"lastModifiedByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"lastModifiedTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"id\",\r",
															"    \"clientId\",\r",
															"    \"name\",\r",
															"    \"description\",\r",
															"    \"categoryId\",\r",
															"    \"status\",\r",
															"    \"complianceStatus\",\r",
															"    \"startDate\",\r",
															"    \"completionDate\",\r",
															"    \"isUrgent\",\r",
															"    \"lastModifiedByUserId\",\r",
															"    \"lastModifiedTimestamp\",\r",
															"    \"createdByUserId\",\r",
															"    \"createdTimestamp\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Creation date is today\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    var currTime = new Date();\r",
															"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
															"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
															"    var yyyy = currTime.getFullYear();\r",
															"    var hh = currTime.getHours() - 3;\r",
															"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
															"\r",
															"    var cretedTimestamp = jsonData.createdTimestamp;\r",
															"    \r",
															"    pm.expect(cretedTimestamp).to.include(currTime);\r",
															"})\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"webhookId\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook QA\",\r\n    \"webhookUrl\": \"http://test.com\",\r\n    \"status\": \"Active\",\r\n    \"webhooks\": [\r\n        {\r\n           \"webhookDefinitionId\":\"DC822DC7-2E46-EC11-AB22-0EB31EA16981\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"name\": \"Test integrationRestrictionLists QA\",\r\n            \"notes\": \"QA\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"queryable\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"clientId\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"name\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"description\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"categoryId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"category\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"status\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"complianceStatus\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"startDate\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"completionDate\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"isUrgent\": {\r",
															"              \"type\": \"boolean\"\r",
															"            },\r",
															"            \"companies\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"dealMembers\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"lastModifiedByUserId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"lastModifiedBy\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"lastModifiedTimestamp\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdByUserId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdBy\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"createdTimestamp\": {\r",
															"              \"type\": \"string\"\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"clientId\",\r",
															"            \"name\",\r",
															"            \"description\",\r",
															"            \"categoryId\",\r",
															"            \"category\",\r",
															"            \"status\",\r",
															"            \"complianceStatus\",\r",
															"            \"startDate\",\r",
															"            \"completionDate\",\r",
															"            \"isUrgent\",\r",
															"            \"companies\",\r",
															"            \"dealMembers\",\r",
															"            \"lastModifiedByUserId\",\r",
															"            \"lastModifiedBy\",\r",
															"            \"lastModifiedTimestamp\",\r",
															"            \"createdByUserId\",\r",
															"            \"createdBy\",\r",
															"            \"createdTimestamp\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"queryable\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Response is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    if (jsonData.queryable.length > 0) {\r",
															"        var requestId = pm.request.url.path[3];\r",
															"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
															"    }\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/{{webhookId}}?$expand=webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"{{webhookId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "audit specific webhook",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"id\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"clientId\": {\r",
															"      \"type\": \"integer\"\r",
															"    },\r",
															"    \"name\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"description\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"categoryId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"complianceStatus\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"startDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"completionDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"isUrgent\": {\r",
															"      \"type\": \"boolean\"\r",
															"    },\r",
															"    \"lastModifiedByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"lastModifiedTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"id\",\r",
															"    \"clientId\",\r",
															"    \"name\",\r",
															"    \"description\",\r",
															"    \"categoryId\",\r",
															"    \"status\",\r",
															"    \"complianceStatus\",\r",
															"    \"startDate\",\r",
															"    \"completionDate\",\r",
															"    \"isUrgent\",\r",
															"    \"lastModifiedByUserId\",\r",
															"    \"lastModifiedTimestamp\",\r",
															"    \"createdByUserId\",\r",
															"    \"createdTimestamp\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Creation date is today\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    var currTime = new Date();\r",
															"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
															"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
															"    var yyyy = currTime.getFullYear();\r",
															"    var hh = currTime.getHours() - 3;\r",
															"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
															"\r",
															"    var cretedTimestamp = jsonData.createdTimestamp;\r",
															"    \r",
															"    pm.expect(cretedTimestamp).to.include(currTime);\r",
															"})\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"webhookId\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook QA\",\r\n    \"webhookUrl\": \"http://test.com\",\r\n    \"status\": \"Active\",\r\n    \"webhooks\": [\r\n        {\r\n           \"webhookDefinitionId\":\"DC822DC7-2E46-EC11-AB22-0EB31EA16981\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"name\": \"Test integrationRestrictionLists QA\",\r\n            \"notes\": \"QA\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations"
													]
												}
											},
											"response": []
										},
										{
											"name": "audit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"queryable\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"clientId\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"name\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"description\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"categoryId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"category\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"status\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"complianceStatus\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"startDate\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"completionDate\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"isUrgent\": {\r",
															"              \"type\": \"boolean\"\r",
															"            },\r",
															"            \"companies\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"dealMembers\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"lastModifiedByUserId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"lastModifiedBy\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"lastModifiedTimestamp\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdByUserId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdBy\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"createdTimestamp\": {\r",
															"              \"type\": \"string\"\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"clientId\",\r",
															"            \"name\",\r",
															"            \"description\",\r",
															"            \"categoryId\",\r",
															"            \"category\",\r",
															"            \"status\",\r",
															"            \"complianceStatus\",\r",
															"            \"startDate\",\r",
															"            \"completionDate\",\r",
															"            \"isUrgent\",\r",
															"            \"companies\",\r",
															"            \"dealMembers\",\r",
															"            \"lastModifiedByUserId\",\r",
															"            \"lastModifiedBy\",\r",
															"            \"lastModifiedTimestamp\",\r",
															"            \"createdByUserId\",\r",
															"            \"createdBy\",\r",
															"            \"createdTimestamp\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"queryable\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Response is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    if (jsonData.queryable.length > 0) {\r",
															"        var requestId = pm.request.url.path[3];\r",
															"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
															"    }\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/{{webhookId}}/audit",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"{{webhookId}}",
														"audit"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "get non existing",
									"item": [
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/(123456789)?$expand=webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"(123456789)"
													],
													"query": [
														{
															"key": "$expand",
															"value": "webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "create",
							"item": [
								{
									"name": "create without integrationRestrictionLists",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"id\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"clientId\": {\r",
															"      \"type\": \"integer\"\r",
															"    },\r",
															"    \"name\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"description\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"categoryId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"complianceStatus\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"startDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"completionDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"isUrgent\": {\r",
															"      \"type\": \"boolean\"\r",
															"    },\r",
															"    \"lastModifiedByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"lastModifiedTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"id\",\r",
															"    \"clientId\",\r",
															"    \"name\",\r",
															"    \"description\",\r",
															"    \"categoryId\",\r",
															"    \"status\",\r",
															"    \"complianceStatus\",\r",
															"    \"startDate\",\r",
															"    \"completionDate\",\r",
															"    \"isUrgent\",\r",
															"    \"lastModifiedByUserId\",\r",
															"    \"lastModifiedTimestamp\",\r",
															"    \"createdByUserId\",\r",
															"    \"createdTimestamp\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Creation date is today\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    var currTime = new Date();\r",
															"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
															"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
															"    var yyyy = currTime.getFullYear();\r",
															"    var hh = currTime.getHours() - 3;\r",
															"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
															"\r",
															"    var cretedTimestamp = jsonData.createdTimestamp;\r",
															"    \r",
															"    pm.expect(cretedTimestamp).to.include(currTime);\r",
															"})\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"webhookId\", jsonData.id);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook QA\",\r\n    \"webhookUrl\": \"http://test.com\",\r\n    \"status\": \"Active\",\r\n    \"webhooks\": [\r\n        {\r\n           \"webhookDefinitionId\":\"DC822DC7-2E46-EC11-AB22-0EB31EA16981\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        \r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"There are no restriction lists\", function(){\r",
															"pm.expect(jsonData.integrationRestrictionLists[0]).to.contain([]);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/{{webhookId}}?$expand=webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"{{webhookId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create with integrationRestrictionLists",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"id\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"clientId\": {\r",
															"      \"type\": \"integer\"\r",
															"    },\r",
															"    \"name\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"description\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"categoryId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"complianceStatus\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"startDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"completionDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"isUrgent\": {\r",
															"      \"type\": \"boolean\"\r",
															"    },\r",
															"    \"lastModifiedByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"lastModifiedTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"id\",\r",
															"    \"clientId\",\r",
															"    \"name\",\r",
															"    \"description\",\r",
															"    \"categoryId\",\r",
															"    \"status\",\r",
															"    \"complianceStatus\",\r",
															"    \"startDate\",\r",
															"    \"completionDate\",\r",
															"    \"isUrgent\",\r",
															"    \"lastModifiedByUserId\",\r",
															"    \"lastModifiedTimestamp\",\r",
															"    \"createdByUserId\",\r",
															"    \"createdTimestamp\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Creation date is today\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    var currTime = new Date();\r",
															"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
															"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
															"    var yyyy = currTime.getFullYear();\r",
															"    var hh = currTime.getHours() - 3;\r",
															"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
															"\r",
															"    var cretedTimestamp = jsonData.createdTimestamp;\r",
															"    \r",
															"    pm.expect(cretedTimestamp).to.include(currTime);\r",
															"})\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"webhookId\", jsonData.id);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook QA\",\r\n    \"webhookUrl\": \"http://test.com\",\r\n    \"status\": \"Active\",\r\n    \"webhooks\": [\r\n        {\r\n           \"webhookDefinitionId\":\"DC822DC7-2E46-EC11-AB22-0EB31EA16981\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"name\": \"Test integrationRestrictionLists QA\",\r\n            \"notes\": \"QA\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"There are no restriction lists\", function(){\r",
															"pm.expect(jsonData.integrationRestrictionLists[0].name).to.contain(\"Test\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/{{webhookId}}?$expand=webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"{{webhookId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create without definition",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook QA\",\r\n    \"webhookUrl\": \"http://test.com\",\r\n    \"status\": \"Active\",\r\n    \"webhooks\": [\r\n        \r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"name\": \"Test integrationRestrictionLists QA\",\r\n            \"notes\": \"QA\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create without name",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"webhookUrl\": \"http://test.com\",\r\n    \"status\": \"Active\",\r\n    \"webhooks\": [\r\n        {\r\n           \"webhookDefinitionId\":\"DC822DC7-2E46-EC11-AB22-0EB31EA16981\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"name\": \"Test integrationRestrictionLists QA\",\r\n            \"notes\": \"QA\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create without url",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook QA\",\r\n    \"status\": \"Active\",\r\n    \"webhooks\": [\r\n        {\r\n           \"webhookDefinitionId\":\"DC822DC7-2E46-EC11-AB22-0EB31EA16981\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"name\": \"Test integrationRestrictionLists QA\",\r\n            \"notes\": \"QA\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create without status",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"id\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"clientId\": {\r",
															"      \"type\": \"integer\"\r",
															"    },\r",
															"    \"name\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"description\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"categoryId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"complianceStatus\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"startDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"completionDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"isUrgent\": {\r",
															"      \"type\": \"boolean\"\r",
															"    },\r",
															"    \"lastModifiedByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"lastModifiedTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"id\",\r",
															"    \"clientId\",\r",
															"    \"name\",\r",
															"    \"description\",\r",
															"    \"categoryId\",\r",
															"    \"status\",\r",
															"    \"complianceStatus\",\r",
															"    \"startDate\",\r",
															"    \"completionDate\",\r",
															"    \"isUrgent\",\r",
															"    \"lastModifiedByUserId\",\r",
															"    \"lastModifiedTimestamp\",\r",
															"    \"createdByUserId\",\r",
															"    \"createdTimestamp\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Creation date is today\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    var currTime = new Date();\r",
															"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
															"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
															"    var yyyy = currTime.getFullYear();\r",
															"    var hh = currTime.getHours() - 3;\r",
															"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
															"\r",
															"    var cretedTimestamp = jsonData.createdTimestamp;\r",
															"    \r",
															"    pm.expect(cretedTimestamp).to.include(currTime);\r",
															"})\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"webhookId\", jsonData.id);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook QA\",\r\n    \"webhookUrl\": \"http://test.com\",\r\n    \"webhooks\": [\r\n        {\r\n           \"webhookDefinitionId\":\"DC822DC7-2E46-EC11-AB22-0EB31EA16981\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"name\": \"Test integrationRestrictionLists QA\",\r\n            \"notes\": \"QA\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"There are no restriction lists\", function(){\r",
															"pm.expect(jsonData.status).to.contain(\"Active\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/{{webhookId}}?$expand=webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"{{webhookId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "put",
							"item": [
								{
									"name": "update the current webhook",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"id\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"clientId\": {\r",
															"      \"type\": \"integer\"\r",
															"    },\r",
															"    \"name\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"description\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"categoryId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"complianceStatus\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"startDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"completionDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"isUrgent\": {\r",
															"      \"type\": \"boolean\"\r",
															"    },\r",
															"    \"lastModifiedByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"lastModifiedTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"id\",\r",
															"    \"clientId\",\r",
															"    \"name\",\r",
															"    \"description\",\r",
															"    \"categoryId\",\r",
															"    \"status\",\r",
															"    \"complianceStatus\",\r",
															"    \"startDate\",\r",
															"    \"completionDate\",\r",
															"    \"isUrgent\",\r",
															"    \"lastModifiedByUserId\",\r",
															"    \"lastModifiedTimestamp\",\r",
															"    \"createdByUserId\",\r",
															"    \"createdTimestamp\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Creation date is today\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    var currTime = new Date();\r",
															"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
															"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
															"    var yyyy = currTime.getFullYear();\r",
															"    var hh = currTime.getHours() - 3;\r",
															"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
															"\r",
															"    var cretedTimestamp = jsonData.createdTimestamp;\r",
															"    \r",
															"    pm.expect(cretedTimestamp).to.include(currTime);\r",
															"})\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"webhookId\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook QA\",\r\n    \"webhookUrl\": \"http://test.com\",\r\n    \"status\": \"Active\",\r\n    \"webhooks\": [\r\n         {\r\n             \"webhookDefinitionId\": \"0367C8B3-594B-EC11-AB22-0EAFC1B4DB39\"\r\n          \r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"name\": \"Test integrationRestrictionLists QA\",\r\n            \"notes\": \"QA\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"postman.setEnvironmentVariable(\"Id\", jsonData.webhooks[0].id)\r",
															"postman.setEnvironmentVariable(\"integrationRestrictionListID\", jsonData.integrationRestrictionLists[0].id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/{{webhookId}}?$expand=webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"{{webhookId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "put",
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"id\": \"{{webhookId}}\",\r\n    \"name\": \"Test WebHook QA edit\",\r\n    \"webhookUrl\": \"https://updated.com\",\r\n    \"status\": \"Active\",\r\n    \"subscriptionType\": 1,\r\n    \"webhooks\": [\r\n        {\r\n            \"id\" : \"{{Id}}\",\r\n            \"webhookDefinitionId\": \"DC822DC7-2E46-EC11-AB22-0EB31EA16981\",\r\n            \"webhookSubscriptionId\": \"{{webhookId}}\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"id\": \"{{integrationRestrictionListID}}\",\r\n            \"name\": \"Test integrationRestrictionLists 6 - Update \",\r\n            \"notes\": \"Test integrationRestrictionLists 6 Notes Update\",\r\n            \"webhookIntegrationId\": \"{{webhookId}}\"\r\n        }\r\n    ]\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/{{webhookId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"{{webhookId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update non existing",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"id\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"clientId\": {\r",
															"      \"type\": \"integer\"\r",
															"    },\r",
															"    \"name\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"description\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"categoryId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"complianceStatus\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"startDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"completionDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"isUrgent\": {\r",
															"      \"type\": \"boolean\"\r",
															"    },\r",
															"    \"lastModifiedByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"lastModifiedTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"id\",\r",
															"    \"clientId\",\r",
															"    \"name\",\r",
															"    \"description\",\r",
															"    \"categoryId\",\r",
															"    \"status\",\r",
															"    \"complianceStatus\",\r",
															"    \"startDate\",\r",
															"    \"completionDate\",\r",
															"    \"isUrgent\",\r",
															"    \"lastModifiedByUserId\",\r",
															"    \"lastModifiedTimestamp\",\r",
															"    \"createdByUserId\",\r",
															"    \"createdTimestamp\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Creation date is today\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    var currTime = new Date();\r",
															"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
															"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
															"    var yyyy = currTime.getFullYear();\r",
															"    var hh = currTime.getHours() - 3;\r",
															"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
															"\r",
															"    var cretedTimestamp = jsonData.createdTimestamp;\r",
															"    \r",
															"    pm.expect(cretedTimestamp).to.include(currTime);\r",
															"})\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"webhookId\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook QA\",\r\n    \"webhookUrl\": \"http://test.com\",\r\n    \"status\": \"Active\",\r\n    \"webhooks\": [\r\n        {\r\n           \"webhookDefinitionId\":\"DC822DC7-2E46-EC11-AB22-0EB31EA16981\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"name\": \"Test integrationRestrictionLists QA\",\r\n            \"notes\": \"QA\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"queryable\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"clientId\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"name\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"description\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"categoryId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"category\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"status\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"complianceStatus\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"startDate\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"completionDate\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"isUrgent\": {\r",
															"              \"type\": \"boolean\"\r",
															"            },\r",
															"            \"companies\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"dealMembers\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"lastModifiedByUserId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"lastModifiedBy\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"lastModifiedTimestamp\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdByUserId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdBy\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"createdTimestamp\": {\r",
															"              \"type\": \"string\"\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"clientId\",\r",
															"            \"name\",\r",
															"            \"description\",\r",
															"            \"categoryId\",\r",
															"            \"category\",\r",
															"            \"status\",\r",
															"            \"complianceStatus\",\r",
															"            \"startDate\",\r",
															"            \"completionDate\",\r",
															"            \"isUrgent\",\r",
															"            \"companies\",\r",
															"            \"dealMembers\",\r",
															"            \"lastModifiedByUserId\",\r",
															"            \"lastModifiedBy\",\r",
															"            \"lastModifiedTimestamp\",\r",
															"            \"createdByUserId\",\r",
															"            \"createdBy\",\r",
															"            \"createdTimestamp\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"queryable\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Response is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    if (jsonData.queryable.length > 0) {\r",
															"        var requestId = pm.request.url.path[3];\r",
															"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
															"    }\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/{{webhookId}}?$expand=webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"{{webhookId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "put",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"id\": \"{{webhookId}}\",\r\n    \"name\": \"Test WebHook QA\",\r\n    \"webhookUrl\": \"https://test.com\",\r\n    \"status\": \"Active\",\r\n    \"subscriptionType\": 1,\r\n    \"webhooks\": [\r\n        {\r\n            \"id\" : \"{{webhookID}}\",\r\n            \"webhookDefinitionId\": \"DC822DC7-2E46-EC11-AB22-0EB31EA16981\",\r\n            \"webhookSubscriptionId\": \"{{webhookId}}\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"id\": \"{{integrationRestrictionListID}}\",\r\n            \"name\": \"Test integrationRestrictionLists 6 - Update \",\r\n            \"notes\": \"Test integrationRestrictionLists 6 Notes Update\",\r\n            \"webhookIntegrationId\": \"{{webhookId}}\"\r\n        }\r\n    ]\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/(12345678)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"(12345678)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete existing",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"id\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"clientId\": {\r",
															"      \"type\": \"integer\"\r",
															"    },\r",
															"    \"name\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"description\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"categoryId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"complianceStatus\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"startDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"completionDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"isUrgent\": {\r",
															"      \"type\": \"boolean\"\r",
															"    },\r",
															"    \"lastModifiedByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"lastModifiedTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"id\",\r",
															"    \"clientId\",\r",
															"    \"name\",\r",
															"    \"description\",\r",
															"    \"categoryId\",\r",
															"    \"status\",\r",
															"    \"complianceStatus\",\r",
															"    \"startDate\",\r",
															"    \"completionDate\",\r",
															"    \"isUrgent\",\r",
															"    \"lastModifiedByUserId\",\r",
															"    \"lastModifiedTimestamp\",\r",
															"    \"createdByUserId\",\r",
															"    \"createdTimestamp\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Creation date is today\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    var currTime = new Date();\r",
															"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
															"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
															"    var yyyy = currTime.getFullYear();\r",
															"    var hh = currTime.getHours() - 3;\r",
															"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
															"\r",
															"    var cretedTimestamp = jsonData.createdTimestamp;\r",
															"    \r",
															"    pm.expect(cretedTimestamp).to.include(currTime);\r",
															"})\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"webhookId\", jsonData.id);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook QA\",\r\n    \"webhookUrl\": \"http://test.com\",\r\n    \"status\": \"Active\",\r\n    \"webhooks\": [\r\n        {\r\n           \"webhookDefinitionId\":\"DC822DC7-2E46-EC11-AB22-0EB31EA16981\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"name\": \"Test integrationRestrictionLists QA\",\r\n            \"notes\": \"QA\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/{{webhookId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"{{webhookId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "delete non existing",
									"item": [
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/(12345678)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"(12345678)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Integration Restriction List",
					"item": [
						{
							"name": "getAll",
							"item": [
								{
									"name": "getAll",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"value\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"value\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var json= pm.response.json()\r",
													"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"integrationRestrictionListId\", jsonData.value[0].id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/integration-restriction-lists?$expand=employeeLevelRestrictions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"integration-restriction-lists"
											],
											"query": [
												{
													"key": "$expand",
													"value": "employeeLevelRestrictions"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "getById",
							"item": [
								{
									"name": "get existing",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"id\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"clientId\": {\r",
															"      \"type\": \"integer\"\r",
															"    },\r",
															"    \"name\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"description\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"categoryId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"complianceStatus\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"startDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"completionDate\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"isUrgent\": {\r",
															"      \"type\": \"boolean\"\r",
															"    },\r",
															"    \"lastModifiedByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"lastModifiedTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdByUserId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"createdTimestamp\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"id\",\r",
															"    \"clientId\",\r",
															"    \"name\",\r",
															"    \"description\",\r",
															"    \"categoryId\",\r",
															"    \"status\",\r",
															"    \"complianceStatus\",\r",
															"    \"startDate\",\r",
															"    \"completionDate\",\r",
															"    \"isUrgent\",\r",
															"    \"lastModifiedByUserId\",\r",
															"    \"lastModifiedTimestamp\",\r",
															"    \"createdByUserId\",\r",
															"    \"createdTimestamp\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Creation date is today\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    var currTime = new Date();\r",
															"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
															"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
															"    var yyyy = currTime.getFullYear();\r",
															"    var hh = currTime.getHours() - 3;\r",
															"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
															"\r",
															"    var cretedTimestamp = jsonData.createdTimestamp;\r",
															"    \r",
															"    pm.expect(cretedTimestamp).to.include(currTime);\r",
															"})\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"webhookId\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"responseTimeOutMinutes\": 60,\r\n    \"name\": \"Test WebHook QA\",\r\n    \"webhookUrl\": \"http://test.com\",\r\n    \"status\": \"Active\",\r\n    \"webhooks\": [\r\n        {\r\n           \"webhookDefinitionId\":\"DC822DC7-2E46-EC11-AB22-0EB31EA16981\"\r\n        }\r\n    ],\r\n    \"integrationRestrictionLists\": [\r\n        {\r\n            \"name\": \"Test integrationRestrictionLists QA\",\r\n            \"notes\": \"QA\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById webhook",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"queryable\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"clientId\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"name\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"description\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"categoryId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"category\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"status\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"complianceStatus\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"startDate\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"completionDate\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"isUrgent\": {\r",
															"              \"type\": \"boolean\"\r",
															"            },\r",
															"            \"companies\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"dealMembers\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"lastModifiedByUserId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"lastModifiedBy\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"lastModifiedTimestamp\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdByUserId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdBy\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"createdTimestamp\": {\r",
															"              \"type\": \"string\"\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"clientId\",\r",
															"            \"name\",\r",
															"            \"description\",\r",
															"            \"categoryId\",\r",
															"            \"category\",\r",
															"            \"status\",\r",
															"            \"complianceStatus\",\r",
															"            \"startDate\",\r",
															"            \"completionDate\",\r",
															"            \"isUrgent\",\r",
															"            \"companies\",\r",
															"            \"dealMembers\",\r",
															"            \"lastModifiedByUserId\",\r",
															"            \"lastModifiedBy\",\r",
															"            \"lastModifiedTimestamp\",\r",
															"            \"createdByUserId\",\r",
															"            \"createdBy\",\r",
															"            \"createdTimestamp\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"queryable\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Response is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    if (jsonData.queryable.length > 0) {\r",
															"        var requestId = pm.request.url.path[3];\r",
															"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
															"    }\r",
															"})\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"integrationRestrictionListId\", jsonData.integrationRestrictionLists[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/webhook-integrations/{{webhookId}}?$expand=webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"webhook-integrations",
														"{{webhookId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "webhooks($expand=webhookDefinition($select=name)),integrationRestrictionLists"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getById restriction list",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"queryable\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"clientId\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"name\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"description\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"categoryId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"category\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"status\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"complianceStatus\": {\r",
															"              \"type\": \"integer\"\r",
															"            },\r",
															"            \"startDate\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"completionDate\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"isUrgent\": {\r",
															"              \"type\": \"boolean\"\r",
															"            },\r",
															"            \"companies\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"dealMembers\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"lastModifiedByUserId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"lastModifiedBy\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"lastModifiedTimestamp\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdByUserId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdBy\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"createdTimestamp\": {\r",
															"              \"type\": \"string\"\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"clientId\",\r",
															"            \"name\",\r",
															"            \"description\",\r",
															"            \"categoryId\",\r",
															"            \"category\",\r",
															"            \"status\",\r",
															"            \"complianceStatus\",\r",
															"            \"startDate\",\r",
															"            \"completionDate\",\r",
															"            \"isUrgent\",\r",
															"            \"companies\",\r",
															"            \"dealMembers\",\r",
															"            \"lastModifiedByUserId\",\r",
															"            \"lastModifiedBy\",\r",
															"            \"lastModifiedTimestamp\",\r",
															"            \"createdByUserId\",\r",
															"            \"createdBy\",\r",
															"            \"createdTimestamp\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"queryable\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
															"})\r",
															"\r",
															"// Test 3\r",
															"pm.test(\"Response is valid\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    if (jsonData.queryable.length > 0) {\r",
															"        var requestId = pm.request.url.path[3];\r",
															"        pm.expect(jsonData.queryable[0].id).to.eql(requestId);\r",
															"    }\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/integration-restriction-lists/{{integrationRestrictionListId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"integration-restriction-lists",
														"{{integrationRestrictionListId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "get non existing",
									"item": [
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/integration-restriction-lists/(123456789)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"integration-restriction-lists",
														"(123456789)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Identity/Role set/User-roles",
					"item": [
						{
							"name": "get",
							"item": [
								{
									"name": "get logged in user role and id",
									"item": [
										{
											"name": "Get the looged in user role and ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"userId\", jsonData.value[0].userId);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/user-roles",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"user-roles"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "post",
							"item": [
								{
									"name": "set role admin",
									"item": [
										{
											"name": "Get logged user role and id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"userId\", jsonData.value[0].userId);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AuthToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/user-roles",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"user-roles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the id for Admin role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Success\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"  postman.setEnvironmentVariable(\"adminUserRoleId\", jsonData.value[0].id);\r",
															"\r",
															"\r",
															"pm.test(\"The 1st role name is Admin\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.value[0].name).to.eq('Admin');\r",
															"});\r",
															"\r",
															" \r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/roles",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"roles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set admin role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"The role is Admin\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.value[0].name).to.eq('Admin');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"roleId\": \"{{adminUserRoleId}}\"\r\n    \r\n \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/user-roles",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"user-roles"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{supportUserToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "set role without userId",
									"item": [
										{
											"name": "Negative - set role without userId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userId\": \"\",\r\n    \"roleId\": \"{{roleId}}\"\r\n    \r\n \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/user-roles",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"user-roles"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "set role without roleId",
									"item": [
										{
											"name": "Negative - set role without roleId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"roleId\": \"\"\r\n    \r\n \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/user-roles",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"user-roles"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "DEPRECATED Restriction List",
					"item": [
						{
							"name": "getAll",
							"item": [
								{
									"name": "expand the employeeLevelRestrictions",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list?$expand=employeeLevelRestrictions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list"
													],
													"query": [
														{
															"key": "$expand",
															"value": "employeeLevelRestrictions"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "getById",
							"item": [
								{
									"name": "get existing list",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"restrictionListId\", jsonData.id);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test Restriction List 5\",\r\n    \"notes\": \"Test Restriction List Notes 5\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list/{{restrictionListId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list",
														"{{restrictionListId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "get non existing list",
									"item": [
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list/(1234567)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list",
														"(1234567)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "create",
							"item": [
								{
									"name": "create list with employeeLevelrestriction",
									"item": [
										{
											"name": "getAll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson = JSON.parse(responseBody);\r",
															"var a=[];\r",
															"var list = (responseJson.value).length;\r",
															"for (var i = 0; i < list; i++) \r",
															"                  {\r",
															"                   var counter = responseJson.value[i];\r",
															"                    if (counter.isin !== null){\r",
															"                        a.push(counter)\r",
															"                    }\r",
															"                    \r",
															"                   }\r",
															"\r",
															" for(var i =0;  i < a.length; i++){\r",
															"     var companyWithIsin = a[i].companies.find(company => company.isin !== null)\r",
															"if (companyWithIsin && companyWithIsin.name) {\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyName\", companyWithIsin ? companyWithIsin.name : \"\");\r",
															"postman.setEnvironmentVariable(\"securitySearchCompanyExtarnalId\", companyWithIsin ? companyWithIsin.externalId : \"\");\r",
															"postman.setEnvironmentVariable(\"cusip\", companyWithIsin ? companyWithIsin.cusip : \"\");\r",
															"postman.setEnvironmentVariable(\"isin\", companyWithIsin ? companyWithIsin.isin : \"\");\r",
															"return;\r",
															"}\r",
															"     console.log(companyWithIsin)\r",
															"         \r",
															"         \r",
															"        \r",
															"         console.log(a[i])\r",
															"    }\r",
															"  \r",
															"\r",
															"\r",
															"function getRandomInt(max) {\r",
															"  return Math.floor(Math.random() * max);\r",
															"}\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"var valueSize = Object.keys(jsonData.value).length\r",
															"var valueId = getRandomInt(valueSize-1);\r",
															"var companySize = Object.keys(jsonData.value[valueId].companies).length\r",
															"var companyId = getRandomInt(companySize);\r",
															"var statusSize = Object.keys(jsonData.value[valueId].status).length\r",
															"var statusId = getRandomInt(statusSize-1);\r",
															"var complianceStatusSize = Object.keys(jsonData.value[valueId].complianceStatus).length\r",
															"var complianceStatusId = getRandomInt(complianceStatusSize-1);\r",
															"var restrictionSize = Object.keys(jsonData.value[valueId].restrictions).length\r",
															"var restrictionId = getRandomInt(restrictionSize);\r",
															"var bool = [true, false];\r",
															"var isUrgent = bool[getRandomInt(2)];\r",
															"var isDraft = bool[getRandomInt(2)];\r",
															"var dealMembersSize = Object.keys(jsonData.value[valueId].dealMembers).length;\r",
															"var dealMembersId = getRandomInt(dealMembersSize-1);\r",
															"var dealMemebersIdStepTwo = getRandomInt(dealMembersSize-1);\r",
															"var dataStatuses = ['NotAvailable', 'Requested', 'Confirmed']\r",
															"var dataDestructionStatus = dataStatuses[getRandomInt(0,2)]\r",
															"var ndaStatuses = ['NotAvailable', 'Negotiating', 'Executed']\r",
															"var ndaStatus = ndaStatuses[getRandomInt(0,2)]\r",
															"\r",
															"// postman.setEnvironmentVariable(\"dataDestructionStatus\", jsonData.value[valueId].companies[companyId].dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"dataDestructionStatus\", dataDestructionStatus);\r",
															"postman.setEnvironmentVariable(\"ndaStatus\", ndaStatus);\r",
															"//postman.setEnvironmentVariable(\"typeId\", jsonData.value[valueId].companies[companyId].typeId);\r",
															"postman.setEnvironmentVariable(\"typeId\",\r",
															"     jsonData.value[valueId].companies[companyId]\r",
															"     ? jsonData.value[valueId].companies[companyId].typeId \r",
															"     : null);\r",
															"\r",
															"postman.setEnvironmentVariable(\"isUrgent\", jsonData.value[valueId].isUrgent);\r",
															"postman.setEnvironmentVariable(\"isDraft\", jsonData.value[valueId].isDraft);\r",
															"postman.setEnvironmentVariable(\"categoryId\", jsonData.value[valueId].categoryId);\r",
															"postman.setEnvironmentVariable(\"dealStatus\", jsonData.value[valueId].status);\r",
															"postman.setEnvironmentVariable(\"complianceStatus\", jsonData.value[valueId].complianceStatus);\r",
															"postman.setEnvironmentVariable(\"companyStatus\", jsonData.value[valueId].companies[companyId].status);\r",
															"postman.setEnvironmentVariable(\"memberIdRecordVisibility\", jsonData.value[valueId].dealMembers[dealMembersId].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeRecordVisibility\", \"RecordVisibilityUser\");\r",
															"postman.setEnvironmentVariable(\"memberId\", jsonData.value[valueId].dealMembers[dealMemebersIdStepTwo].memberId);\r",
															"postman.setEnvironmentVariable(\"memberTypeInternalDealLead\", \"InternalDealLeadUser\");\r",
															"postman.setEnvironmentVariable(\"recordTypeDeal\", \"Deal\");\r",
															"//postman.setEnvironmentVariable(\"employeeRestriction\", jsonData.value[valueId].restrictions[restrictionId].employeeRestriction);\r",
															"\r",
															"\r",
															"postman.setEnvironmentVariable(\"employeeRestriction\",\r",
															"     jsonData.value[valueId].restrictions[restrictionId] \r",
															"     ? jsonData.value[valueId].restrictions[restrictionId].employeeRestriction \r",
															"     : null);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals?$expand=restrictions,dealMembers,companies",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions,dealMembers,companies"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new deal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
															"\r",
															"    var jsonData =pm.response.json();\r",
															"pm.test(\"The deal status is active\", function(){\r",
															"pm.expect(jsonData.isDraft).to.eq(true);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"pm.environment.set(\"randomDealName\", _.random(1, 1000) +\" \" + \"API deal\")",
															"pm.environment.set(\"randomCompanyName1\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"randomCompanyName2\", _.random(1, 1000) +\" \" + \"API company\")",
															"pm.environment.set(\"contactsUnderTentName\", _.random(1, 1000) +\" \" + \"API contact name\")",
															"pm.environment.set(\"contactsUnderTentTitle\", _.random(1, 1000) +\" \" + \"API contact title\")",
															"pm.environment.set(\"restrictionName\", _.random(1, 1000) +\" \" + \"API  restriction\")",
															"",
															"",
															"",
															"const uuid = Math.random().toString(36).substring(2, 15) +",
															"        Math.random().toString(36).substring(2, 15);",
															"const randomEmail =  uuid + \"@emaill.com\";",
															"pm.environment.set(\"randomEmail\", randomEmail)",
															"",
															"var dateNow= new Date();pm.environment.set(\"randomDealDescription\", dateNow.toISOString() + \" \" + \"API deal description\")",
															"var startDate = (Date.now() + 86400000); pm.environment.set('startDate', new Date(startDate).toISOString())",
															"var completionDate = (Date.now() + 172800000); pm.environment.set('completionDate', new Date(completionDate).toISOString())",
															"var contactAddedDate = (Date.now() + 172800000); pm.environment.set('contactAddedDate', new Date(contactAddedDate).toISOString())",
															"var dataDestructionCompletedDate =  (Date.now() + 172800000); pm.environment.set('dataDestructionCompletedDate', new Date(dataDestructionCompletedDate).toISOString())",
															"var dataDestructionRequestedDate = (Date.now() + 86400000); pm.environment.set('dataDestructionRequestedDate', new Date(dataDestructionRequestedDate).toISOString())",
															"",
															"var ndaCompletedDate = (Date.now() + 1864000000); pm.environment.set('ndaCompletedDate', new Date(ndaCompletedDate).toISOString())",
															"var ndaRequestedDate = (Date.now() + 86400000); pm.environment.set('ndaRequestedDate', new Date(ndaRequestedDate).toISOString())",
															"var restrictionEndDate = (Date.now() + 86400000); pm.environment.set('restrictionEndDate', new Date(restrictionEndDate).toISOString())",
															"",
															"// pm.sendRequest('https://qa.platform.devacaalpha.com/api/control-room/v1/deals?$expand=restrictions,dealMembers,companies', function (err, res) {",
															"//         pm.expect(err).to.not.be.ok;",
															"//         pm.expect(res).to.have.property('code', 200);",
															"//         pm.expect(res).to.have.property('status', 'OK');",
															"//     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{randomDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n     \"recordType\": \"{{recordTypeDeal}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraft}},\r\n     \"companies\": [{\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            },{\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"company\": {\r\n                        \"name\": \"{{randomCompanyName1}}\"\r\n                    }\r\n            }],\r\n            \"companyAdvisees\": [],\r\n            \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"{{securitySearchCompanyName}}\"\r\n                    }\r\n            }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"dealMember\":\r\n                    {\r\n                        \"memberId\": \"{{memberId}}\",\r\n                        \"memberType\": \"{{memberTypeInternalDealLead}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"clientId\", jsonData.clientId)\r",
															"postman.setEnvironmentVariable(\"recordType\", jsonData.recordType)\r",
															"postman.setEnvironmentVariable(\"lastModifiedByUserId\", jsonData.lastModifiedByUserId)\r",
															"postman.setEnvironmentVariable(\"lastModifiedTimestamp\", jsonData.lastModifiedTimestamp)\r",
															"postman.setEnvironmentVariable(\"createdByUserId\", jsonData.createdByUserId)\r",
															"postman.setEnvironmentVariable(\"createdTimestamp\", jsonData.createdTimestamp)\r",
															"postman.setEnvironmentVariable(\"company1Id\", jsonData.companies[0].id) //it is ok if only 1 company\r",
															"postman.setEnvironmentVariable(\"company2Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[1].id : null)\r",
															"postman.setEnvironmentVariable(\"company3Id\", jsonData.companies[1] ? \r",
															"jsonData.companies[2].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent1Id\", jsonData.companies[0].contactsUnderTent[0] ? jsonData.companies[0].contactsUnderTent[0].id : null)\r",
															"postman.setEnvironmentVariable(\"contactsUnderTent2Id\", jsonData.companies[0].contactsUnderTent[1] ? jsonData.companies[0].contactsUnderTent[1].id : null)\r",
															"postman.setEnvironmentVariable(\"dealMemberVisibilityId\", jsonData.dealMembers[0].id)\r",
															"postman.setEnvironmentVariable(\"dealMemberInternalId\", jsonData.dealMembers[1].id) //might cause issues when more than one visibility user\r",
															"postman.setEnvironmentVariable(\"restriction1Id\", jsonData.restrictions[0].id) //for the 1st restriction only\r",
															"postman.setEnvironmentVariable(\"isSyncToMarketAbuse1\", jsonData.restrictions[0].isSyncToMarketAbuse) \r",
															"postman.setEnvironmentVariable(\"companyRestrictions1Id\", jsonData.restrictions[0].companyRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"memberRestrictions1Id\", jsonData.restrictions[0].memberRestrictions[0].id) \r",
															"postman.setEnvironmentVariable(\"isDraftAlwaysFalse\", \"false\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"randomUpdatedDealName\", _.random(1, 1000) +\" \" + \"Updated API deal\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\r\n\r\n{\r\n    \"id\": \"27a902cd-a718-4315-13f2-08d99e9830fa\",\r\n    \"clientId\": 3396,\r\n    \"recordType\": \"Deal\",\r\n    \"name\": \"961 API deal\",\r\n    \"description\": \"2021-11-03T08:07:33.267Z API deal description\",\r\n    \"categoryId\": \"0b8ef1d5-41da-eb11-aae9-0e29a95e9f25\",\r\n    \"status\": \"Paused\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2021-11-04T08:07:33.267Z\",\r\n    \"completionDate\": \"2021-11-05T08:07:33.267Z\",\r\n    \"isUrgent\": false,\r\n    \"isDraft\": false,\r\n    \"lastModifiedByUserId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n    \"lastModifiedTimestamp\": \"2021-11-03T08:14:00.7786257Z\",\r\n    \"createdByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n    \"createdTimestamp\": \"2021-11-03T08:07:34.4503331Z\",\r\n    \"companies\": [\r\n        {\r\n            \"id\": \"2100326f-acb5-4461-19bc-08d99e983105\",\r\n            \"dealId\": \"27a902cd-a718-4315-13f2-08d99e9830fa\",\r\n            \"clientId\": 3396,\r\n            \"name\": \"NESN VX\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"03be7d38-c469-423c-a60a-dc7e66305fd9\",\r\n            \"companyAdvisees\": [],\r\n            \"companyRestrictions\": [\r\n                {\r\n                    \"id\": \"f06e082f-84de-4590-5ec7-08d99e98311b\",\r\n                    \"clientId\": 3396,\r\n                    \"restrictionId\": \"5d00de25-f463-4d19-413b-08d99e983116\",\r\n                    \"companyId\": \"2100326f-acb5-4461-19bc-08d99e983105\",\r\n                    \"lastModifiedByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n                    \"lastModifiedTimestamp\": \"2021-11-03T08:07:34.4503331Z\",\r\n                    \"createdByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n                    \"createdTimestamp\": \"2021-11-03T08:07:34.4503331Z\"\r\n                }\r\n            ],\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"ndaRequestedDate\": \"2021-11-04T08:07:33.267Z\",\r\n            \"ndaCompletedDate\": \"2021-11-24T21:54:13.267Z\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"dataDestructionRequestedDate\": \"2021-11-04T08:07:33.267Z\",\r\n            \"dataDestructionCompletedDate\": \"2021-11-05T08:07:33.267Z\",\r\n            \"cusip\": \"H57312649\",\r\n            \"isin\": \"CH0038863350\",\r\n            \"externalId\": \"031df699-5502-eb11-8140-000c29887906\",\r\n            \"contactsUnderTent\": [\r\n                {\r\n                    \"id\": \"c0054313-fe13-4981-ac97-08d99e985f5a\",\r\n                    \"name\": \"594 API contact name\",\r\n                    \"title\": \"321 API contact title\",\r\n                    \"email\": \"Letitia_Beatty@hotmail.com\",\r\n                    \"addedDate\": \"2021-11-05T08:07:33.267Z\"\r\n                },\r\n                {\r\n                    \"id\": \"cc1e73bb-163c-4fe0-ac98-08d99e985f5a\",\r\n                    \"name\": \"594 API contact name\",\r\n                    \"title\": \"321 API contact title\",\r\n                    \"email\": \"Hortense.Boehm16@yahoo.com\",\r\n                    \"addedDate\": \"2021-11-05T08:07:33.267Z\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"dc85d400-5951-4b82-afb3-03be3ad9ff0d\",\r\n            \"memberType\": \"InternalDealLeadUser\",\r\n            \"id\": \"e6b86e95-78ca-4254-fce3-08d99e983111\"\r\n        },\r\n        {\r\n            \"memberId\": \"dc85d400-5951-4b82-afb3-03be3ad9ff0d\",\r\n            \"memberType\": \"RecordVisibilityUser\",\r\n            \"id\": \"4be82431-bcd8-49c2-fce2-08d99e983111\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"id\": \"5d00de25-f463-4d19-413b-08d99e983116\",\r\n            \"dealId\": \"27a902cd-a718-4315-13f2-08d99e9830fa\",\r\n            \"clientId\": 3396,\r\n            \"memberRestrictions\": [],\r\n            \"isSyncToMarketAbuse\": false,\r\n            \"companyRestrictions\": [\r\n                {\r\n                    \"id\": \"f06e082f-84de-4590-5ec7-08d99e98311b\",\r\n                    \"clientId\": 3396,\r\n                    \"restrictionId\": \"5d00de25-f463-4d19-413b-08d99e983116\",\r\n                    \"companyId\": \"2100326f-acb5-4461-19bc-08d99e983105\",\r\n                    \"lastModifiedByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n                    \"lastModifiedTimestamp\": \"2021-11-03T08:07:34.4503331Z\",\r\n                    \"createdByUserId\": \"e4864753-47dd-4f95-893d-75e9d847e23e\",\r\n                    \"createdTimestamp\": \"2021-11-03T08:07:34.4503331Z\",\r\n                    \"company\": {\r\n                        \"name\": \"NESN VX\"\r\n                    }\r\n                }\r\n            ],\r\n            \"employeeLevelRestrictions\": [\r\n                {\r\n                    \"id\": \"e1ec1bcb-273f-457a-be4c-08d99ea1e451\",\r\n                    \"restrictionId\": \"5d00de25-f463-4d19-413b-08d99e983116\",\r\n                    \"screeningListName\": \"Test 10.05.2021\",\r\n                    \"screeningListId\": \"03cdc2ec-1f6d-4f18-9376-4b600888f7a1\"\r\n                },\r\n                 {\r\n                    \"screeningListName\": \"Local Screening List\",\r\n                    \"screeningListType\" : \"ControlRoom\",\r\n                    \"screeningListId\": \"fee3dc0d-96ce-45fd-eb95-08d99e0bd808\"\r\n                }\r\n            ],\r\n            \"endDate\": \"2021-11-04T08:07:33.267Z\",\r\n            \"name\": \"135 API  restriction\",\r\n            \"startDate\": \"2021-11-04T08:07:33.267Z\"\r\n        }\r\n    ]\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"randomUpdatedDealName\", _.random(1, 1000) +\" \" + \"Updated API deal\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n     \"id\": \"{{dealId}}\",\r\n    \"clientId\": {{clientId}},\r\n    \"recordType\": \"{{recordType}}\",\r\n    \"name\": \"{{randomUpdatedDealName}}\",\r\n    \"description\": \"{{randomDealDescription}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"status\": \"{{dealStatus}}\",\r\n    \"complianceStatus\": \"{{complianceStatus}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"completionDate\": \"{{completionDate}}\",\r\n    \"isUrgent\": {{isUrgent}},\r\n    \"isDraft\": {{isDraftAlwaysFalse}},\r\n     \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n    \"createdByUserId\": \"{{createdByUserId}}\",\r\n    \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n     \"companies\": [{\r\n          \"id\": \"{{company1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"name\": \"{{securitySearchCompanyName}}\",\r\n            \"externalId\": \"{{securitySearchCompanyExtarnalId}}\",\r\n            \"cusip\": \"{{cusip}}\",\r\n            \"isin\": \"{{isin}}\",\r\n             \"dataDestructionCompletedDate\": \"{{dataDestructionCompletedDate}}\",\r\n            \"dataDestructionRequestedDate\": \"{{dataDestructionRequestedDate}}\",\r\n            \"dataDestructionStatus\": \"{{dataDestructionStatus}}\",\r\n            \"ndaCompletedDate\": \"{{ndaCompletedDate}}\",\r\n            \"ndaRequestedDate\": \"{{ndaRequestedDate}}\",\r\n            \"ndaStatus\": \"{{ndaStatus}}\",\r\n            \"status\": \"{{companyStatus}}\",\r\n            \"typeId\": \"{{typeId}}\",\r\n            \"contactsUnderTent\": [{\r\n                \"id\": \"{{contactsUnderTent1Id}}\",\r\n                \"clientId\": {{clientId}},\r\n                \"companyId\": \"{{company1Id}}\",\r\n                \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                \"createdByUserId\": \"{{createdByUserId}}\",\r\n                \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n                \"name\": \"{{contactsUnderTentName}}\",\r\n                \"title\": \"{{contactsUnderTentTitle}}\",\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"addedDate\":\"{{contactAddedDate}}\"\r\n                \r\n            }\r\n            ]\r\n            \r\n           \r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"{{memberIdRecordVisibility}}\",\r\n            \"memberType\": \"{{memberTypeRecordVisibility}}\",\r\n             \"id\": \"{{dealMemberVisibilityId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        },\r\n        {\r\n            \"memberId\": \"{{memberId}}\",\r\n            \"memberType\": \"{{memberTypeInternalDealLead}}\",\r\n            \"id\": \"{{dealMemberInternalId}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"{{restrictionName}}\",\r\n            \"endDate\": \"{{restrictionEndDate}}\",\r\n            \"startDate\": \"{{startDate}}\",\r\n            \"employeeRestriction\": \"{{employeeRestriction}}\",\r\n             \"id\": \"{{restriction1Id}}\",\r\n            \"clientId\": {{clientId}},\r\n            \"dealId\": \"{{dealId}}\",\r\n            \"isSyncToMarketAbuse\": {{isSyncToMarketAbuse1}},\r\n            \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n            \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n            \"createdByUserId\": \"{{createdByUserId}}\",\r\n            \"createdTimestamp\": \"{{createdTimestamp}}\",\r\n\r\n            \"companyRestrictions\": [{\r\n                    \"id\": \"{{companyRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"companyId\": \"{{company1Id}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                }\r\n            ],\r\n            \"memberRestrictions\": [\r\n                {\r\n                    \"id\": \"{{memberRestrictions1Id}}\",\r\n                    \"clientId\": {{clientId}},\r\n                    \"restrictionId\": \"{{restriction1Id}}\",\r\n                    \"dealMemberId\": \"{{dealMemberInternalId}}\",\r\n                    \"lastModifiedByUserId\": \"{{lastModifiedByUserId}}\",\r\n                    \"lastModifiedTimestamp\": \"{{lastModifiedTimestamp}}\",\r\n                    \"createdByUserId\": \"{{createdByUserId}}\",\r\n                    \"createdTimestamp\": \"{{createdTimestamp}}\"\r\n                        }\r\n               \r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"The deal name contains updated\", function(){\r",
															"    var jsonData =pm.response.json();\r",
															"pm.expect(jsonData.name).to.contain(\"Updated\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"deals",
														"{{dealId}}"
													],
													"query": [
														{
															"key": "$expand",
															"value": "restrictions($expand=companyRestrictions,memberRestrictions),dealMembers,companies($expand=contactsUnderTent)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get all restriction lists with expanded ELR",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"@odata.context\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"value\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": {}\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"@odata.context\",\r",
															"    \"value\"\r",
															"  ]\r",
															"}\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Schema is valid\", function(){\r",
															"    var json= pm.response.json()\r",
															"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list?$expand=employeeLevelRestrictions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list"
													],
													"query": [
														{
															"key": "$expand",
															"value": "employeeLevelRestrictions"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a list without employeeLevelRestriction",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"restrictionListId\", jsonData.id);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"New restriction list\",\r\n    \"notes\": \"Test Restriction List \"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list/{{restrictionListId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list",
														"{{restrictionListId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a list with empty name",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"restrictionListId\", jsonData.id);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"notes\": \"Test Restriction List \"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create a list with empty notes",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"restrictionListId\", jsonData.id);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"List API\",\r\n    \"notes\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list/{{restrictionListId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list",
														"{{restrictionListId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "patch",
							"item": [
								{
									"name": "update non existing list",
									"item": [
										{
											"name": "patch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test Restriction List 5 - Updated\",\r\n    \"notes\": \"Test Restriction List Notes 5 - Updated\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list/(12345t)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list",
														"(12345t)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update existing list",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"restrictionListId\", jsonData.id);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"New restriction list\",\r\n    \"notes\": \"Test Restriction List \"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test Restriction List 5 - Updated\",\r\n    \"notes\": \"Test Restriction List Notes 5 - Updated\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list/{{restrictionListId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list",
														"{{restrictionListId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list/{{restrictionListId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list",
														"{{restrictionListId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete existing list",
									"item": [
										{
											"name": "create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"restrictionListId\", jsonData.id);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"New restriction list\",\r\n    \"notes\": \"Test Restriction List \"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"// Test 2\r",
															"pm.test(\"Response body is valid\", function () {\r",
															"    if (pm.response.code == 404) {\r",
															"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
															"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list/{{restrictionListId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list",
														"{{restrictionListId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "getById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list/{{restrictionListId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list",
														"{{restrictionListId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "delete non existing list",
									"item": [
										{
											"name": "delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test 1\r",
															"pm.test(\"Status code is 204 or 404\", function () {\r",
															"    if (pm.response.code == 204) {\r",
															"        pm.response.to.have.status(204);\r",
															"    }\r",
															"    else {\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/v1/restriction-list/(123456)",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"v1",
														"restriction-list",
														"(123456)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "DEPRECATED Deal Members",
					"item": [
						{
							"name": "internal dela lead user case",
							"item": [
								{
									"name": "Get deal ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"value\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"value\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var json= pm.response.json()\r",
													"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealId\", jsonData.value[0].id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign internal  deal lead user to a deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													"pm.test(\"This is InternalDealLeadUser\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.memberType).to.eq('InternalDealLeadUser');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"{{dealId}}\",\r\n    \"memberId\": \"EE3034BA-ECCC-44F5-BDB4-93EAF6679944\",\r\n    \"memberType\": \"InternalDealLeadUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "List a specific deal member by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change the member type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"memberType\": \"RecordVisibilityGroup\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "internal insider user case",
							"item": [
								{
									"name": "Get deal ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"value\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"value\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var json= pm.response.json()\r",
													"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign internal  insider  user to a deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													"pm.test(\"This is InternalDealLeadUser\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.memberType).to.eq('InternalInsiderUser');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"{{dealId}}\",\r\n    \"memberId\": \"EE3034BA-ECCC-44F5-BDB4-93EAF6679944\",\r\n    \"memberType\": \"InternalInsiderUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "List a specific deal member by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change the member type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"memberType\": \"InternalDealLeadUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "internal deal associate user case",
							"item": [
								{
									"name": "Get deal ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"value\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"value\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var json= pm.response.json()\r",
													"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign internal  deal associate  user to a deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													"pm.test(\"This is InternalDealLeadUser\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.memberType).to.eq('InternalDealAssociateUser');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"{{dealId}}\",\r\n    \"memberId\": \"EE3034BA-ECCC-44F5-BDB4-93EAF6679944\",\r\n    \"memberType\": \"InternalDealAssociateUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "List a specific deal member by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change the member type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"memberType\": \"RecordVisibilityGroup\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "internal insider group case",
							"item": [
								{
									"name": "Get deal ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"value\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"value\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var json= pm.response.json()\r",
													"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign internal insider group to a deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													"pm.test(\"This is InternalDealLeadUser\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.memberType).to.eq('InternalInsiderGroup');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"{{dealId}}\",\r\n    \"memberId\": \"fd74774c-8eb2-431c-98fb-5f403520f5ef\",\r\n    \"memberType\": \"InternalInsiderGroup\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "List a specific deal member by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change the member type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"memberType\": \"AssociatedComplianceTeamUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "associated compliance team user case",
							"item": [
								{
									"name": "Get deal ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"value\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"value\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var json= pm.response.json()\r",
													"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign Associated Compliance Team User to a deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													"pm.test(\"This is InternalDealLeadUser\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.memberType).to.eq('AssociatedComplianceTeamUser');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"{{dealId}}\",\r\n    \"memberId\": \"EE3034BA-ECCC-44F5-BDB4-93EAF6679944\",\r\n    \"memberType\": \"AssociatedComplianceTeamUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "List a specific deal member by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change the member type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"memberType\": \"AssociatedComplianceTeamUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "associated compliance team group case",
							"item": [
								{
									"name": "Get deal ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"value\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"value\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var json= pm.response.json()\r",
													"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign Associated Compliance Team group to a deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													"pm.test(\"This is InternalDealLeadUser\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.memberType).to.eq('AssociatedComplianceTeamGroup');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"{{dealId}}\",\r\n    \"memberId\": \"fd74774c-8eb2-431c-98fb-5f403520f5ef\",\r\n    \"memberType\": \"AssociatedComplianceTeamGroup\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "List a specific deal member by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change the member type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"memberType\": \"AssociatedComplianceTeamUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "company advisor group case",
							"item": [
								{
									"name": "Get deal ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"value\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"value\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var json= pm.response.json()\r",
													"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign company advisor group to a deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													"pm.test(\"This is InternalDealLeadUser\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.memberType).to.eq('CompanyAdvisorGroup');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"{{dealId}}\",\r\n    \"memberId\": \"fd74774c-8eb2-431c-98fb-5f403520f5ef\",\r\n    \"memberType\": \"CompanyAdvisorGroup\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "List a specific deal member by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change the member type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"memberType\": \"AssociatedComplianceTeamUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "company advisor user case",
							"item": [
								{
									"name": "Get deal ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"value\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"value\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var json= pm.response.json()\r",
													"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign company advisor user to a deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													"pm.test(\"This is InternalDealLeadUser\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.memberType).to.eq('CompanyAdvisorUser');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"{{dealId}}\",\r\n    \"memberId\": \"EE3034BA-ECCC-44F5-BDB4-93EAF6679944\",\r\n    \"memberType\": \"CompanyAdvisorUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "List a specific deal member by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change the member type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"memberType\": \"AssociatedComplianceTeamUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "record visibility user case",
							"item": [
								{
									"name": "Get deal ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"value\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"value\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var json= pm.response.json()\r",
													"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign Record Visibility User to a deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													"pm.test(\"This is InternalDealLeadUser\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.memberType).to.eq('RecordVisibilityUser');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"{{dealId}}\",\r\n    \"memberId\": \"EE3034BA-ECCC-44F5-BDB4-93EAF6679944\",\r\n    \"memberType\": \"RecordVisibilityUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "List a specific deal member by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change the member type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"memberType\": \"AssociatedComplianceTeamUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Deal Members Negative",
							"item": [
								{
									"name": "Assign Record Visibility group to a deal without dealId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"\",\r\n    \"memberId\": \"fd74774c-8eb2-431c-98fb-5f403520f5ef\",\r\n    \"memberType\": \"RecordVisibilityGroup\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign Record Visibility group to a deal without memberType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"4fa02957-7cc6-4767-bec5-08d92c2971d8\",\r\n    \"memberId\": \"\",\r\n    \"memberType\": \"RecordVisibilityGroup\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign Record Visibility group to a deal without memberId Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"4fa02957-7cc6-4767-bec5-08d92c2971d8\",\r\n    \"memberId\": \"fd74774c-8eb2-431c-98fb-5f403520f5ef\",\r\n    \"memberType\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign Record Visibility group to multiple deals",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": [\"4fa02957-7cc6-4767-bec5-08d92c2971d8\",\"f7f3b1f5-abd1-4465-f56b-08d92ff411a8\"],\r\n    \"memberId\": \"fd74774c-8eb2-431c-98fb-5f403520f5ef\",\r\n    \"memberType\": \"RecordVisibilityGroup\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign Record Visibility group to a deal with multiple memberIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"4fa02957-7cc6-4767-bec5-08d92c2971d8\",\r\n    \"memberId\": [\"fd74774c-8eb2-431c-98fb-5f403520f5ef\",\"EE3034BA-ECCC-44F5-BDB4-93EAF6679944\"],\r\n    \"memberType\": \"RecordVisibilityGroup\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign Record Visibility group to a deal with multiple memberTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"4fa02957-7cc6-4767-bec5-08d92c2971d8\",\r\n    \"memberId\": \"fd74774c-8eb2-431c-98fb-5f403520f5ef\",\r\n    \"memberType\": [\"RecordVisibilityGroup\", \"CompanyAdvisorUser\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "record visibility group case",
							"item": [
								{
									"name": "Get deal ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"value\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"value\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var json= pm.response.json()\r",
													"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign Record Visibility group to a deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealMemberId\", jsonData.id);\r",
													"\r",
													"pm.test(\"This is InternalDealLeadUser\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.memberType).to.eq('RecordVisibilityGroup');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"dealId\": \"{{dealId}}\",\r\n    \"memberId\": \"fd74774c-8eb2-431c-98fb-5f403520f5ef\",\r\n    \"memberType\": \"RecordVisibilityGroup\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members"
											]
										}
									},
									"response": []
								},
								{
									"name": "List a specific deal member by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change the member type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"memberType\": \"AssociatedComplianceTeamUser\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deal-members/{{dealMemberId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deal-members",
												"{{dealMemberId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create a new deal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"clientId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"categoryId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complianceStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"startDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completionDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isUrgent\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"lastModifiedByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModifiedTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"id\",\r",
											"    \"clientId\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"categoryId\",\r",
											"    \"status\",\r",
											"    \"complianceStatus\",\r",
											"    \"startDate\",\r",
											"    \"completionDate\",\r",
											"    \"isUrgent\",\r",
											"    \"lastModifiedByUserId\",\r",
											"    \"lastModifiedTimestamp\",\r",
											"    \"createdByUserId\",\r",
											"    \"createdTimestamp\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
											"\r",
											"pm.test(\"The deal status is Tentative\", function(){\r",
											"    var jsonData =pm.response.json();\r",
											"pm.expect(jsonData.status).to.eq('Tentative');\r",
											"});\r",
											"\r",
											"pm.test(\"The compliance status is Needs Review\", function(){\r",
											"    var jsonData =pm.response.json();\r",
											"pm.expect(jsonData.complianceStatus).to.eq('NeedsReview');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom Deal\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n    \"companies\": [\r\n        {\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }\r\n    ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLeadUser\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deals",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deals"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new deal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"@odata.context\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"clientId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"categoryId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complianceStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"startDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completionDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isUrgent\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"lastModifiedByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModifiedTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdByUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdTimestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"@odata.context\",\r",
											"    \"id\",\r",
											"    \"clientId\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"categoryId\",\r",
											"    \"status\",\r",
											"    \"complianceStatus\",\r",
											"    \"startDate\",\r",
											"    \"completionDate\",\r",
											"    \"isUrgent\",\r",
											"    \"lastModifiedByUserId\",\r",
											"    \"lastModifiedTimestamp\",\r",
											"    \"createdByUserId\",\r",
											"    \"createdTimestamp\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema is valid\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"})\r",
											"\r",
											"// Test 3\r",
											"pm.test(\"Creation date is today\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    var currTime = new Date();\r",
											"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
											"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
											"    var yyyy = currTime.getFullYear();\r",
											"    var hh = currTime.getHours() - 3;\r",
											"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
											"\r",
											"    var cretedTimestamp = jsonData.createdTimestamp;\r",
											"    \r",
											"    pm.expect(cretedTimestamp).to.include(currTime);\r",
											"})\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
											"\r",
											"pm.test(\"The deal status is Tentative\", function(){\r",
											"    var jsonData =pm.response.json();\r",
											"pm.expect(jsonData.status).to.eq('Tentative');\r",
											"});\r",
											"\r",
											"pm.test(\"The compliance status is Needs Review\", function(){\r",
											"    var jsonData =pm.response.json();\r",
											"pm.expect(jsonData.complianceStatus).to.eq('NeedsReview');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom Deal\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n    \"companies\": [\r\n        {\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }\r\n    ],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalInsiders\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}$expand=DealMembers",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deals",
										"{{dealId}}$expand=DealMembers"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all deal members",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/deal-members",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"deal-members"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DEPRECATED Comments",
					"item": [
						{
							"name": "getAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"visibility\", jsonData.value[0].visibility);",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"entityId\", jsonData.value[0].entityId);",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"entityType\", jsonData.value[0].entityType);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/comments?$filter=EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"comments"
									],
									"query": [
										{
											"key": "$filter",
											"value": "EntityId eq 4fa02957-7cc6-4767-bec5-08d92c2971d8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"commentId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entityType\": \"Deal\",\r\n  \"visibility\": \"{{visibility}}\",\r\n  \"entityId\": \"{{entityId}}\",\r\n  \"text\" : \"im here just to check the comments\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/comments",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"visibility\": \"Private\",\r\n  \"text\" : \"wowww did you just comment thatt?\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/comments/{{commentId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getById",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/comments(Id=17d6a19a-6eb8-4560-7ce5-08d97d12ebc3,EntityId=4fa02957-7cc6-4767-bec5-08d92c2971d8)",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"comments(Id=17d6a19a-6eb8-4560-7ce5-08d97d12ebc3,EntityId=4fa02957-7cc6-4767-bec5-08d92c2971d8)"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/comments/{{commentId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DEPRECATED ContactsUnderTent",
					"item": [
						{
							"name": "Create multiple contacts under tent",
							"item": [
								{
									"name": "create 2 ContactUnderTent for 1 company",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"clientId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"categoryId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"complianceStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"startDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"completionDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"isUrgent\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"lastModifiedByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"lastModifiedTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"id\",\r",
													"    \"clientId\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"categoryId\",\r",
													"    \"status\",\r",
													"    \"complianceStatus\",\r",
													"    \"startDate\",\r",
													"    \"completionDate\",\r",
													"    \"isUrgent\",\r",
													"    \"lastModifiedByUserId\",\r",
													"    \"lastModifiedTimestamp\",\r",
													"    \"createdByUserId\",\r",
													"    \"createdTimestamp\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ControlRoom Deal 22 July\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"5a0882ba-67e9-eb11-aae9-0e29a95e9f25\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n     \"companies\": [{\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"name 1 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },{\r\n                \"name\": \"name 2 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"companyAdvisors\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"5e0882ba-67e9-eb11-aae9-0e29a95e9f25\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 2\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"5e0882ba-67e9-eb11-aae9-0e29a95e9f25\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 3\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"5e0882ba-67e9-eb11-aae9-0e29a95e9f25\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },\r\n            {\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 3\"\r\n                    }\r\n            }] \r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Restriction 2\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 2\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "List the expanded deal with contacts under tent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The deal is not draft\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.isDraft).to.eq(false);\r",
													"});\r",
													"\r",
													"pm.test(\"The deal is urgent\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.isUrgent).to.eq(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The deal status is Active\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.status).to.eq('Active');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"There is contact under the tent name in the response\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].name).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"There is contact under the tent title in the response\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].title).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"There is contact under the tent is linked with company\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].companyId).to.exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=Companies($expand=ContactsUnderTent)",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Companies($expand=ContactsUnderTent)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create contact under the tent wihtout added date",
							"item": [
								{
									"name": "Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ControlRoom Deal 22 July\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n     \"companies\": [{\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"name 1 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },{\r\n                \"name\": \"name 2 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"companyAdvisors\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 2\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 3\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },\r\n            {\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 3\"\r\n                    }\r\n            }] \r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Restriction 2\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 2\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "List the expanded deal with contacts under tent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The deal is not draft\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.isDraft).to.eq(false);\r",
													"});\r",
													"\r",
													"pm.test(\"The deal is urgent\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.isUrgent).to.eq(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The deal status is Active\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.status).to.eq('Active');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"There is contact under the tent name in the response\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].name).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"There is contact under the tent title in the response\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].title).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"There is contact under the tent is linked with company\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].companyId).to.exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=Companies($expand=ContactsUnderTent)",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Companies($expand=ContactsUnderTent)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create 1 contact under the tent for each company",
							"item": [
								{
									"name": "create 1  ContactUnderTent per  company",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"clientId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"categoryId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"complianceStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"startDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"completionDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"isUrgent\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"lastModifiedByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"lastModifiedTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"id\",\r",
													"    \"clientId\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"categoryId\",\r",
													"    \"status\",\r",
													"    \"complianceStatus\",\r",
													"    \"startDate\",\r",
													"    \"completionDate\",\r",
													"    \"isUrgent\",\r",
													"    \"lastModifiedByUserId\",\r",
													"    \"lastModifiedTimestamp\",\r",
													"    \"createdByUserId\",\r",
													"    \"createdTimestamp\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ControlRoom Deal 229 July\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n     \"companies\": [{\r\n            \"name\": \"ControlRoom Company1\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"name 1 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company1\"\r\n                    }\r\n            }],\r\n            \"companyAdvisors\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 3\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },\r\n            {\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 3\"\r\n                    }\r\n            }] \r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Restriction 2\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals?$expand=Companies($expand=ContactsUnderTent)",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Companies($expand=ContactsUnderTent)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List the expanded deal with contacts under tent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The deal is not draft\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.isDraft).to.eq(false);\r",
													"});\r",
													"\r",
													"pm.test(\"The deal is urgent\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.isUrgent).to.eq(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The deal status is Active\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.status).to.eq('Active');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"There is contact under the tent name in the response\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].name).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"There is contact under the tent title in the response\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].title).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"There is contact under the tent is linked with company\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].companyId).to.exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=Companies($expand=ContactsUnderTent)",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Companies($expand=ContactsUnderTent)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create contact under tent without name",
							"item": [
								{
									"name": "Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ControlRoom Deal 22 July\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n     \"companies\": [{\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },{\r\n                \"name\": \"name 2 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"companyAdvisors\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 2\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 3\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },\r\n            {\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 3\"\r\n                    }\r\n            }] \r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Restriction 2\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 2\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "List the expanded deal with contacts under tent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The deal is not draft\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.isDraft).to.eq(false);\r",
													"});\r",
													"\r",
													"pm.test(\"The deal is urgent\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.isUrgent).to.eq(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The deal status is Active\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.status).to.eq('Active');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"There is contact under the tent name in the response\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].name).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"There is contact under the tent title in the response\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].title).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"There is contact under the tent is linked with company\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].companyId).to.exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=Companies($expand=ContactsUnderTent)",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Companies($expand=ContactsUnderTent)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create contact under tent without title",
							"item": [
								{
									"name": "Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"clientId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"categoryId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"complianceStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"startDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"completionDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"isUrgent\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"lastModifiedByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"lastModifiedTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"id\",\r",
													"    \"clientId\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"categoryId\",\r",
													"    \"status\",\r",
													"    \"complianceStatus\",\r",
													"    \"startDate\",\r",
													"    \"completionDate\",\r",
													"    \"isUrgent\",\r",
													"    \"lastModifiedByUserId\",\r",
													"    \"lastModifiedTimestamp\",\r",
													"    \"createdByUserId\",\r",
													"    \"createdTimestamp\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ControlRoom Deal 22 July\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n     \"companies\": [{\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"title 1 contactsunderTent\",\r\n                \"title\": \"\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },{\r\n                \"name\": \"name 2 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"companyAdvisors\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 2\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 3\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },\r\n            {\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 3\"\r\n                    }\r\n            }] \r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Restriction 2\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 2\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "List the expanded deal with contacts under tent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The deal is not draft\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.isDraft).to.eq(false);\r",
													"});\r",
													"\r",
													"pm.test(\"The deal is urgent\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.isUrgent).to.eq(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The deal status is Active\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.status).to.eq('Active');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"There is contact under the tent name in the response\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].name).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"There is contact under the tent title in the response\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].title).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"There is contact under the tent is linked with company\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].companyId).to.exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=Companies($expand=ContactsUnderTent)",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Companies($expand=ContactsUnderTent)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create contact under tent without company object",
							"item": [
								{
									"name": "Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ControlRoom Deal 22 July\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n     \"companies\": [{\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"title 1 contactsunderTent\",\r\n                \"title\": \"\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\"\r\n            }],\r\n            \"companyAdvisors\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 2\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 3\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },\r\n            {\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 3\"\r\n                    }\r\n            }] \r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Restriction 2\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 2\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "List the expanded deal with contacts under tent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The deal is not draft\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.isDraft).to.eq(false);\r",
													"});\r",
													"\r",
													"pm.test(\"The deal is urgent\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.isUrgent).to.eq(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The deal status is Active\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.status).to.eq('Active');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"There is contact under the tent name in the response\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].name).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"There is contact under the tent title in the response\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].title).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"There is contact under the tent is linked with company\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.companies[0].contactsUnderTent[0].companyId).to.exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=Companies($expand=ContactsUnderTent)",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Companies($expand=ContactsUnderTent)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom ContactUnderTent\",\r\n    \"userId\": 7603,\r\n    \"companyId\": \"63D8B0F9-C293-4ED1-294E-08D93C6D0CB3\",\r\n    \"addedDate\": \"2023-01-01T00:00:00+00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/contacts-under-tent/:contactUnderTentId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"contacts-under-tent",
										":contactUnderTentId"
									],
									"variable": [
										{
											"key": "contactUnderTentId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "put",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1\r",
											"pm.test(\"Status code is 204 or 404\", function () {\r",
											"    if (pm.response.code == 204) {\r",
											"        pm.response.to.have.status(204);\r",
											"    }\r",
											"    else {\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Test 2\r",
											"pm.test(\"Response body is valid\", function () {\r",
											"    if (pm.response.code == 404) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
											"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ControlRoom ContactUnderTent\",\r\n    \"userId\": 7603,\r\n    \"companyId\": \"63D8B0F9-C293-4ED1-294E-08D93C6D0CB3\",\r\n    \"addedDate\": \"2023-01-01T00:00:00+00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/v1/contacts-under-tent/:contactUnderTentId",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"v1",
										"contacts-under-tent",
										":contactUnderTentId"
									],
									"variable": [
										{
											"key": "contactUnderTentId",
											"value": "4FA02957-7CC6-4767-BEC5-08D92C2971D8"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DEPRECATEDDeal Restrictions",
					"item": [
						{
							"name": "Restrict internal deal lead",
							"item": [
								{
									"name": "create resrictions through the deal endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"clientId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"categoryId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"complianceStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"startDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"completionDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"isUrgent\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"lastModifiedByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"lastModifiedTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"id\",\r",
													"    \"clientId\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"categoryId\",\r",
													"    \"status\",\r",
													"    \"complianceStatus\",\r",
													"    \"startDate\",\r",
													"    \"completionDate\",\r",
													"    \"isUrgent\",\r",
													"    \"lastModifiedByUserId\",\r",
													"    \"lastModifiedTimestamp\",\r",
													"    \"createdByUserId\",\r",
													"    \"createdTimestamp\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ControlRoom Deal 22 July\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n     \"companies\": [{\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"name 1 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },{\r\n                \"name\": \"name 2 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"companyAdvisors\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 2\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 3\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": null,\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },\r\n            {\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 3\"\r\n                    }\r\n            }] \r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Restriction 2\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 2\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "expand the restrictions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealRestrictionId\", jsonData.id);\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"There is at least one employee restriction\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].employeeRestriction).to.exist;});\r",
													"\r",
													"pm.test(\"There is at least one employee restriction\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].employeeRestriction).to.eq('InternalDealLead');});\r",
													"\r",
													"pm.test(\"The restriction has name\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].name).to.exist;});\r",
													"\r",
													"pm.test(\"The restriction has start date\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].startDate).to.exist;});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=Restrictions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Restrictions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Restrict InternalDealLead, InternalDealAssociates",
							"item": [
								{
									"name": "create resrictions through the deal endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"clientId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"categoryId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"complianceStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"startDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"completionDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"isUrgent\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"lastModifiedByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"lastModifiedTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"id\",\r",
													"    \"clientId\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"categoryId\",\r",
													"    \"status\",\r",
													"    \"complianceStatus\",\r",
													"    \"startDate\",\r",
													"    \"completionDate\",\r",
													"    \"isUrgent\",\r",
													"    \"lastModifiedByUserId\",\r",
													"    \"lastModifiedTimestamp\",\r",
													"    \"createdByUserId\",\r",
													"    \"createdTimestamp\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ControlRoom Deal 22 July\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n     \"companies\": [{\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"name 1 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },{\r\n                \"name\": \"name 2 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"companyAdvisors\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 2\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 3\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead, InternalDealAssociates\", \r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },\r\n            {\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 3\"\r\n                    }\r\n            }] \r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Restriction 2\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealLead, InternalDealAssociates\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 2\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "expand the restrictions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealRestrictionId\", jsonData.id);\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"There is at least one employee restriction\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].employeeRestriction).to.eq('InternalDealLead, InternalDealAssociates');});\r",
													"\r",
													"pm.test(\"The restriction has name\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].name).to.exist;});\r",
													"\r",
													"pm.test(\"The restriction has start date\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].startDate).to.exist;});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=Restrictions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Restrictions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Restrict internal deal associates",
							"item": [
								{
									"name": "create resrictions through the deal endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"clientId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"categoryId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"complianceStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"startDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"completionDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"isUrgent\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"lastModifiedByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"lastModifiedTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"id\",\r",
													"    \"clientId\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"categoryId\",\r",
													"    \"status\",\r",
													"    \"complianceStatus\",\r",
													"    \"startDate\",\r",
													"    \"completionDate\",\r",
													"    \"isUrgent\",\r",
													"    \"lastModifiedByUserId\",\r",
													"    \"lastModifiedTimestamp\",\r",
													"    \"createdByUserId\",\r",
													"    \"createdTimestamp\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ControlRoom Deal 22 July\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n     \"companies\": [{\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"name 1 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },{\r\n                \"name\": \"name 2 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"companyAdvisors\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 2\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 3\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealAssociates\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },\r\n            {\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 3\"\r\n                    }\r\n            }] \r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Restriction 2\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"InternalDealAssociates\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 2\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "expand the restrictions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealRestrictionId\", jsonData.id);\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"There is at least one employee restriction\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].employeeRestriction).to.eq('InternalDealAssociates');});\r",
													"\r",
													"pm.test(\"The restriction has name\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].name).to.exist;});\r",
													"\r",
													"pm.test(\"The restriction has start date\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].startDate).to.exist;});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=Restrictions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Restrictions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Restrict AssociatedComplianceTeam",
							"item": [
								{
									"name": "create resrictions through the deal endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"clientId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"categoryId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"complianceStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"startDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"completionDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"isUrgent\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"lastModifiedByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"lastModifiedTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"id\",\r",
													"    \"clientId\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"categoryId\",\r",
													"    \"status\",\r",
													"    \"complianceStatus\",\r",
													"    \"startDate\",\r",
													"    \"completionDate\",\r",
													"    \"isUrgent\",\r",
													"    \"lastModifiedByUserId\",\r",
													"    \"lastModifiedTimestamp\",\r",
													"    \"createdByUserId\",\r",
													"    \"createdTimestamp\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ControlRoom Deal 22 July\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n     \"companies\": [{\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"name 1 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },{\r\n                \"name\": \"name 2 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"companyAdvisors\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 2\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 3\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"AssociatedComplianceTeam\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },\r\n            {\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 3\"\r\n                    }\r\n            }] \r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Restriction 2\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"AssociatedComplianceTeam\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 2\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "expand the restrictions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealRestrictionId\", jsonData.id);\r",
													"\r",
													"\r",
													"pm.test(\"There is at least one employee restriction\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].employeeRestriction).to.eq('AssociatedComplianceTeam');});\r",
													"\r",
													"pm.test(\"The restriction has name\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].name).to.exist;});\r",
													"\r",
													"pm.test(\"The restriction has start date\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].startDate).to.exist;});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=Restrictions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Restrictions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Restrict AllEmployees",
							"item": [
								{
									"name": "create resrictions through the deal endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"@odata.context\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"clientId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"categoryId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"complianceStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"startDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"completionDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"isUrgent\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"lastModifiedByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"lastModifiedTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdByUserId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdTimestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"@odata.context\",\r",
													"    \"id\",\r",
													"    \"clientId\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"categoryId\",\r",
													"    \"status\",\r",
													"    \"complianceStatus\",\r",
													"    \"startDate\",\r",
													"    \"completionDate\",\r",
													"    \"isUrgent\",\r",
													"    \"lastModifiedByUserId\",\r",
													"    \"lastModifiedTimestamp\",\r",
													"    \"createdByUserId\",\r",
													"    \"createdTimestamp\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Schema is valid\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
													"})\r",
													"\r",
													"// Test 3\r",
													"pm.test(\"Creation date is today\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    var currTime = new Date();\r",
													"    var dd = String(currTime.getDate()).padStart(2, '0');\r",
													"    var mm = String(currTime.getMonth() + 1).padStart(2, '0');\r",
													"    var yyyy = currTime.getFullYear();\r",
													"    var hh = currTime.getHours() - 3;\r",
													"    currTime = yyyy + '-' + mm + '-' + dd + 'T' + hh + \":\";\r",
													"\r",
													"    var cretedTimestamp = jsonData.createdTimestamp;\r",
													"    \r",
													"    pm.expect(cretedTimestamp).to.include(currTime);\r",
													"})\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealId\", jsonData.id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ControlRoom Deal 22 July\",\r\n    \"description\": \"ControlRoom Deal description\",\r\n    \"categoryId\": \"caaff113-cc2b-4f00-f56c-08d92ff411a8\",\r\n    \"status\": \"Active\",\r\n    \"complianceStatus\": \"NeedsReview\",\r\n    \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n    \"completionDate\": \"2023-01-12T00:00:00+00:00\",\r\n    \"isUrgent\": true,\r\n     \"companies\": [{\r\n            \"name\": \"ControlRoom Company\",\r\n            \"contactsUnderTent\": [{\r\n                \"name\": \"name 1 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },{\r\n                \"name\": \"name 2 contactsunderTent\",\r\n                \"title\": \"title 1 contactsunderTent\",\r\n                \"addedDate\":\"2023-01-01T00:00:00+00:00\",\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"companyAdvisors\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            }],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 2\",\r\n            \"contactsUnderTent\": [\r\n            ],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Company 3\",\r\n            \"contactsUnderTent\": [],\r\n            \"dataDestructionCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"dataDestructionRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"dataDestructionStatus\": \"NotAvailable\",\r\n            \"ndaCompletedDate\": \"2023-01-12T00:00:00+00:00\",\r\n            \"ndaRequestedDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"ndaStatus\": \"NotAvailable\",\r\n            \"status\": \"Paused\",\r\n            \"typeId\": \"A1EDA3A9-9CE9-426E-B99D-08D93C802F28\"\r\n        }],\r\n    \"dealMembers\": [\r\n        {\r\n            \"memberId\": \"a68ac5c6-db6c-4087-85da-95c843fef759\",\r\n            \"memberType\": \"RecordVisibilityUser\"\r\n        },\r\n        {\r\n            \"memberId\": \"d5852733-bb5e-4387-ab9a-5cf23b29e507\",\r\n            \"memberType\": \"InternalDealLeadUser\"\r\n        }\r\n    ],\r\n    \"restrictions\": [\r\n        {\r\n            \"name\": \"ControlRoom Restriction\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"AllEmployees\", \r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company\"\r\n                    }\r\n            },\r\n            {\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 3\"\r\n                    }\r\n            }] \r\n        },\r\n         {\r\n            \"name\": \"ControlRoom Restriction 2\",\r\n            \"endDate\": null,\r\n            \"startDate\": \"2023-01-01T00:00:00+00:00\",\r\n            \"employeeRestriction\": \"AllEmployees\",\r\n            \"companyRestrictions\": [{\r\n                \"company\": {\r\n                        \"name\": \"ControlRoom Company 2\"\r\n                    }\r\n            }] \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals"
											]
										}
									},
									"response": []
								},
								{
									"name": "expand the restrictions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"dealRestrictionId\", jsonData.id);\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"There is at least one employee restriction\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].employeeRestriction).to.eq('AllEmployees');});\r",
													"\r",
													"pm.test(\"The restriction has name\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].name).to.exist;});\r",
													"\r",
													"pm.test(\"The restriction has start date\", function(){\r",
													"    var jsonData =pm.response.json();\r",
													"pm.expect(jsonData.restrictions[0].startDate).to.exist;});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}?$expand=Restrictions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Restrictions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1\r",
													"pm.test(\"Status code is 204 or 404\", function () {\r",
													"    if (pm.response.code == 204) {\r",
													"        pm.response.to.have.status(204);\r",
													"    }\r",
													"    else {\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"// Test 2\r",
													"pm.test(\"Response body is valid\", function () {\r",
													"    if (pm.response.code == 404) {\r",
													"        pm.expect(pm.response.text()).to.include(\"Entity of type\");\r",
													"        pm.expect(pm.response.text()).to.include(\"was not found.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/v1/deals/{{dealId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"v1",
												"deals",
												"{{dealId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "$metadata",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ApiBaseUrl}}/v1/$metadata",
					"host": [
						"{{ApiBaseUrl}}"
					],
					"path": [
						"v1",
						"$metadata"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AuthToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}